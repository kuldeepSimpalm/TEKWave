/*
 * File: app/controller/staticForm.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('tekwave.controller.staticForm', {
    extend: 'Ext.app.Controller',

    config: {
        control: {
            "#staticFormList": {
                itemtap: 'onStaticFormListItemTap'
            }
        }
    },

    onStaticFormListItemTap: function(dataview, index, target, record, e, eOpts) {
        //chrome.exe --disable-web-security
        //open -a Google\ Chrome --args --disable-web-security


        console.log(record);
        //console.log(e);

        var ver21 = Ext.version.version >= "2.1";
        //console.log(ver21 );
        var formId=record.data.formName.replace(/ /g,'')+record.data.formId;

        //Ext.getCmp('demopanel').model=true;


        Ext.getCmp('demopanel').removeAll();

        Ext.getCmp('staticFormSearchPnl').removeAll();

        var itm;

        if(record.data.quickLinkScreen ==='IncidentListScreen' || record.data.quickLinkScreen ==='UnusualIncidentListScreen' || record.data.quickLinkScreen ==='LogisticsInspectionListScreen' || record.data.quickLinkScreen ==='VisitorListScreen' ){

                                itm=[{
                                        xtype: 'button',
                                        text: 'Create New',
                                        ui: 'plain',
                                        listeners: {
                                            tap: function(button,e, eOpts) {

                                                Ext.getCmp('demopanel').hide();

                                                 tekwave.app.getControllerInstances()['tekwave.controller.staticForm'].addForm(record, formId);
                                            }//End itemTap
                                         }//End listner
                                    },
                                    {
                                        xtype: 'button',
                                        text: 'List',
                                        ui: 'plain',
                                        listeners: {
                                            tap: function(button,e, eOpts) {
                                                 Ext.getCmp('demopanel').hide();

                                                console.log('list');
                                                 tekwave.app.getControllerInstances()['tekwave.controller.staticForm'].createStaticForm(record);

                                                //tekwave.app.getControllerInstances()['tekwave.controller.staticForm'].createStaticForm(record);
                                             }//End itemTap
                                         }//End listner
                                    }/*,
                                    {
                                        xtype: 'button',
                                        text: 'Search',
                                        ui: 'plain',
                                        listeners: {
                                            tap: function(button,e, eOpts) {
                                                 Ext.getCmp('demopanel').hide();


                          createSearchView(record);



                                                //tekwave.app.getControllerInstances()['tekwave.controller.staticForm'].createStaticForm(record);
                                             }//End itemTap
                                         }//End listner
                                    },
                                    {
                                        xtype: 'button',
                                        text: 'Cancel',
                                        ui: 'plain',
                                        listeners: {
                                            tap: function(button,e, eOpts) {
                                                 Ext.getCmp('demopanel').hide();

                                                console.log('cancel');
                                                              }//End itemTap
                                         }//End listner
                                    } */];



        }else{

                                 itm=[{
                                        xtype: 'button',
                                        text: 'Create New',
                                        ui: 'plain',
                                        listeners: {
                                            tap: function(button,e, eOpts) {

                                                Ext.getCmp('demopanel').hide();

                                                 tekwave.app.getControllerInstances()['tekwave.controller.staticForm'].addForm(record, formId);
                                            }//End itemTap
                                         }//End listner
                                    },
                                    {
                                        xtype: 'button',
                                        text: 'List',
                                        ui: 'plain',
                                        listeners: {
                                            tap: function(button,e, eOpts) {
                                                 Ext.getCmp('demopanel').hide();

                                                console.log('list');
                                                 tekwave.app.getControllerInstances()['tekwave.controller.staticForm'].createStaticForm(record);

                                                //tekwave.app.getControllerInstances()['tekwave.controller.staticForm'].createStaticForm(record);
                                             }//End itemTap
                                         }//End listner
                                    }/*,
                                    {
                                        xtype: 'button',
                                        text: 'Cancel',
                                        ui: 'plain',
                                        listeners: {
                                            tap: function(button,e, eOpts) {
                                                 Ext.getCmp('demopanel').hide();

                                                console.log('cancel');
                                                              }//End itemTap
                                         }//End listner
                                    }*/];

        }




        Ext.getCmp('demopanel').add(itm);

        Ext.getCmp('demopanel').showBy(target);


        function createSearchView(record){
           Ext.getCmp('staticFormSearchPnl').show();


           Ext.getCmp('staticFormSearchPnl').removeAll(true, true);

            Ext.getCmp('staticFormSearchPnl').add(
                {
                   xtype: 'titlebar',
                   cls: [
                      'titleBar',
                      'fontFamilyCath'
                    ],
                    docked: 'top',
                    title: 'Search'
                 });



            /*


            {
                                xtype: 'panel',
                                cls: 'titleBar',
                                docked: 'top',
                                layout: 'hbox',
                                items: [
                                    {
                                        xtype: 'button',
                                        flex: 1,
                                        ui: 'plain',
                                        text: 'Local'
                                    },
                                    {
                                        xtype: 'button',
                                        flex: 1,
                                        ui: 'plain',
                                        text: 'Server'
                                    },
                                    {
                                        xtype: 'button',
                                        flex: 1,
                                        ui: 'plain',
                                        text: 'Cancel'
                                    }
                                ]
                            }

                            */
                Ext.getCmp('staticFormSearchPnl').add( {
                                xtype: 'titlebar',
                                cls: 'titleBar',
                                docked: 'bottom',
                               // height: 50,
                              //  hidden: false,
                                layout: {
                                    type: 'hbox',
                                    align: 'center'
                                },
                                items: [
                                    {
                                        xtype: 'button',
                                        handler: function(button, e) {
                                               //Save/Cancel form

                                        },
                                      //  html: '<img class="imgBtnCls" src="img/save_icon.png"  /><p class="whiteBtn">Save</p>',
                                        id: 'formSave',
                                        ui: 'plain',
                                        width: '50px',
                                        text: 'Local'
                                    },
                                    {
                                        xtype: 'spacer'
                                    },
                                    {
                                        xtype: 'button',
                                        handler: function(button, e) {
                                                   //Save/Cancel form
                                        },
                                     //   html: '<img style="width: 30%;" class="" src="img/upload_icon.png" /><p class="whiteBtn">Save & Upload</p>',
                                        id: 'formSave1',
                                        ui: 'plain',
                                        width: '85px',
                                        text: 'Server'
                                    },
                                    {
                                        xtype: 'spacer'
                                    },
                                    {
                                        xtype: 'button',
                                        handler: function(button, e) {
                                            //Save/Cancel form

                                        },
                                       // html: '<img src="img/cancel_icon.png"  class="imgBtnCls" /> <p class="whiteBtn">Cancel</p>',
                                        ui: 'plain',
                                        width: '50px',
                                         text: 'Cancel'
                                    }
                                ]
                            }
            );
        }//end createSerarchView


        /*
              console.log("leafitemtap: " + record.get("formName"));
                            var target;
                            if (ver21) {
                                target = target.element.down(".x-list-item-body"); //  ".x-list-item-inner"
                            } else {
                                target = target.down(".x-list-item-label");
                            }
                            var onTop = (target.getPageBox().top > 70);
                            var sp = Ext.create("Ext.Panel", {
                                cls: "b-context-menu " + (onTop ? "b-top" : "b-bottom"),
                                modal: true,
                                hideOnMaskTap: true,
                                items: [
                                    {
                                        xtype: "segmentedbutton",
                                        items: [{ text: "A" }, { text: "B" }, { text: "C"}],
                                        listeners: {
                                            toggle: function (ctl, button, isPressed) {
                                                alert(button.getText());
                                                sp.destroy();
                                            }
                                        }
                                    }
                                ],
                                listeners: {
                                    hide: function () {
                                        sp.destroy();
                                    }
                                }
                            });

                            */

        //tekwave.app.getControllerInstances()['tekwave.controller.staticForm'].createStaticForm(record);

        /*
        console.log(record);
        //console.log(record.data.formName.replace(/ /g,''));
        var formId=record.data.formName.replace(/ /g,'')+record.data.formId;


        //If form already created
        //if(Ext.getCmp(formId)){
            if(Ext.getCmp(record.data.quickLinkScreen.replace(/ /g,''))){

          //  Ext.getCmp('navMainView').setActiveItem(Ext.getCmp(formId));
            Ext.getCmp('navMainView').setActiveItem(Ext.getCmp(record.data.quickLinkScreen.replace(/ /g,'')));


        }else{





        var title= record.data.formName;
        var font;
            if(title.length>20){

                 font='font-size : 14px;';


                }else{
                     font='';
                }


        Ext.getCmp('navMainView').add({
                        xtype: 'container',
                        id:record.data.quickLinkScreen.replace(/ /g,''),
                        layout: {
                            type: 'vbox',
                            pack: 'center'
                        },
                       // padding : 5,
                        items: [
                            {
                                xtype: 'titlebar',
                                cls: [
                                    'titleBar',
                                    'fontFamilyCath'
                                ],
                                docked: 'top',

                                title: record.data.formName,
                                style : font,
                                items: [
                                    {
                                        xtype: 'button',

                                        listeners: {
                                            tap: function() {
                                             console.log(Ext.getCmp('navMainView'))   ;
                                                 //alert('s');
                                               //  Ext.getCmp('navMainView').setActiveItem(Ext.getCmp('menuCont'));
                                                 tekwave.app.getControllerInstances()['tekwave.controller.MainController'].navigation('menuCont');


                                    }//End itemTap

                                  },//end listners
                                        height: 30,
                                        html: '<img src="img/img/btn_menu.png" width="80%" height="80%" />',
                                        ui: 'plain',
                                        width: 50,

                                         id : record.data.quickLinkScreen.replace(/ /g,'')+'_2',
                                        text: ''
                                    },
                                    {
                                        xtype: 'button',
                                        align: 'right',
                                        ui: 'plain',
                                        iconAlign: 'right',
                                        id : record.data.quickLinkScreen.replace(/ /g,'')+'_1',
                                        iconCls: 'add',
                                         listeners: {
                                            tap: function() {
                                             addForm(formId);
                                                //   Ext.getCmp('navMainView').setActiveItem(Ext.getCmp(formId));

                                    }//End itemTap

                                  }//end listners
                                    }
                                ]
                            }
                    ]

        });
        //Grid View List of Static Form
         Ext.getCmp(record.data.quickLinkScreen.replace(/ /g,'')).add({
                                xtype: 'dataview',
                                height:'100%',
                                maxWidth: '100%',
                                width: '100%',
                                scrollable: {
                                    direction: 'vertical',
                                    directionLock: true
                                },
                                inline: {
                                    wrap: true
                                },
                                itemTpl: [
                                    '<div align="center" class= "gridlistHead" style="">',
                                    '    <div  class="gridlistSection" style="">',
                                    '        <p class="dataViewFontCls fontFamilyCath">{data1}</p>',
                                    '        <img class="homeList" style="" src="{icon}" />',
                                    '        <p class="dataViewFontCls fontFamilyCath">{name}</p>',
                                    '    </div>',
                                    '    <div  class="smallFont2 fontFamilyCath">',
                                    '        {type}',
                                    '    </div>',
                                    '</div>'
                                ],
                                store: 'staticForm',
                                listeners: {
                                    itemtap: function(dataview, index, target, record,e, eOpts) {

                                        console.log(record);
                                        //Ext.getCmp('navMainView').setActiveItem(Ext.getCmp(formId));
                                        addForm(formId);
                                    }//End itemTap

                                  }//end listners
                            });//End Grid View List of Static Form



         //   console.log(Ext.getCmp(record.data.quickLinkScreen.replace(/ /g,'')));








        //Adding Form

            function addForm(formId){
                console.log(formId);
                if(Ext.getCmp(formId)){

                    Ext.getCmp('navMainView').setActiveItem(Ext.getCmp(formId));
            }else{



                Ext.getCmp('navMainView').add({
                        xtype: 'container',
                        id: formId,
                        layout: {
                            type: 'vbox',
                            pack: 'center'
                        },
                       // padding : 5,
                        items: [
                            {
                                xtype: 'titlebar',
                                cls: [
                                    'titleBar',
                                    'fontFamilyCath'
                                ],
                                docked: 'top',
                                title: record.data.formName,
                                style : font,
                                items: [
                                    {
                                        xtype: 'button',
                                        id : record.data.formName.replace(/ /g,'')+'_3',

                                         listeners: {
                                            tap: function(button,e, eOpts) {
                                            //alert('k');
                                                 //Ext.getCmp('navMainView').setActiveItem(Ext.getCmp('menuCont'));
                                            tekwave.app.getControllerInstances()['tekwave.controller.MainController'].navigation('menuCont');


                                            }//End itemTap
                                         },//End listner
                                        height: 30,
                                        html: '<img src="img/img/btn_menu.png" width="80%" height="80%" />',
                                        ui: 'plain',
                                        width: 50,
                                        text: ''
                                    }
                                ]
                            }
                    ]

        });



        Ext.getCmp(formId).add(

             {
                                xtype: 'panel',
                                height: '10%',
                                id: 'formCatTag'+formId,
                                layout: 'hbox',
                                cls : 'scrollerBar',//whitePnlBg

                              scrollable: 'horizontal'
                            });




        Ext.getCmp(formId).add({
                                xtype: 'carousel',
                                height: '90%',
                                id : 'carousel'+formId,
                               listeners: {
                                initialize: function() {
                                    this.onBefore('activeitemchange', function(container, value, oldValue, eOpts) {

                                       // console.log('activeItem change');
                                       // console.log(container.getActiveIndex());
                                       // console.log(value);

                                       // console.log(Ext.getCmp('formCatTag'+formId).items.items);
                                        for(var a=0; a<Ext.getCmp('formCatTag'+formId).items.items.length; a++){

                                      //
                                            if(a===container.getActiveIndex()){
                                                //Scrolling menus
                                                Ext.getCmp('formCatTag'+formId).getScrollable().getScroller().scrollTo(Ext.getCmp('formCatTag'+formId).items.items[a].bodyElement.dom.offsetLeft ,  false, {type: 'slide', duration: '400', easing: 'linear'});

                                                 console.log(Ext.getCmp('formCatTag'+formId).items.items[a].bodyElement.dom.offsetLeft);
                                                Ext.getCmp('formCatTag'+formId).items.items[a].setCls('lebelFont themeFontBlue fontFamilyCath underLine');

                                            }else{
                                                Ext.getCmp('formCatTag'+formId).items.items[a].setCls('lebelFont fontFamilyCath');
                                            }


                                        }


                                        //Customize button Css



                                        /////



                                });
                                }
                                },
                                indicator: false
                            });






















            //Adding forms and top sectional navigation
            for(var k=0; k<record.data.allfieldData.length; k++){
                var cls;

                if(k===0){ cls='lebelFont themeFontBlue fontFamilyCath underLine';}
                else{ cls='lebelFont  fontFamilyCath'; }

                Ext.getCmp('formCatTag'+formId).add( {
                                        xtype: 'button',
                                        handler: function(button, e) {
                                            //change the pane
                                            //console.log(this.bodyElement.dom.offsetLeft+' '+this.bodyElement.dom.offsetWidth);
                                           //console.log(Ext.getCmp('formCatTag'+formId).getScrollable().getScroller().scrollTo(this.bodyElement.dom.offsetLeft ,  false, {type: 'slide', duration: '400', easing: 'linear'}));
                                            Ext.getCmp('formCatTag'+formId).getScrollable().getScroller().scrollTo(this.bodyElement.dom.offsetLeft ,  false, {type: 'slide', duration: '400', easing: 'linear'});
                                          //  console.log(this);

                                           // console.log( Ext.getCmp('carousel'+formId));
                                          // button.getScroller().scroller.scrollTo(0, 0);
                                            for(var j=0; j<button.parent.items.items.length; j++){
                                                if(button.id===button.parent.items.items[j].id){

                                                    Ext.getCmp('carousel'+formId).setActiveItem(j);
                                                    button.setCls('lebelFont themeFontBlue fontFamilyCath underLine');
                                                }else{
                                                    //console.log('else');
                                                    button.parent.items.items[j].setCls('lebelFont fontFamilyCath');
                                                }


                                            }//tracing button Position

                                           // console.log(button);

                                        },
                                        cls: cls,
                                        ui: 'plain',
                                        html : '<div class="">'+record.data.allfieldData[k].section+'</div>'
                                      // html : '<div class="arrow_box">'+record.data.allfieldData[k].section+'</div>'
                                       // text: record.data.allfieldData[k].section
                                    });


                //Adding Forms
                Ext.getCmp('carousel'+formId).add({
                        xtype: 'formpanel',
                        id : 'formpanel_'+k+formId,
                        height: '100%',
                        padding: 10,
                        layout: 'vbox',
                        scrollable: 'vertical'


                    });










                var width='95%';
                var itemMargin=4;
                var lavelWidth='40%';
                //Adding different type sencha form fields like textfield, textare etc...
                for (var q=0; q<record.data.allfieldData[k].formField.length; q++){
                    var formFieldData=record.data.allfieldData[k].formField[q];
                  // console.log(formFieldData.type);







                    if(record.data.allfieldData[k].section==='Questions'){
                      //   console.log(formFieldData.type);
                     //   console.log(formFieldData.slctFldOptions);
                        //creating store for each select fields
                                var model = Ext.define('User', {
                                    extend: 'Ext.data.Model',
                                    config: {
                                    fields: [{
                                        name: 'text'

                                            }, {
                                           name: 'value'
                                            }]
                                        }
                                    });

                              var store= Ext.create("Ext.data.Store", {
                                storeId: "slectStore"+'formpanel_'+k+q+formId,
                                model: "User",
                                data: formFieldData.slctFldOptions
                                });

                      //  console.log(Ext.getStore("slectStore"+'formpanel_'+k+q+formId));

                          //  var opt=Ext.JSON.encode(formFieldData.slctFldOptions);


                        var sel={
                            xtype: 'selectfield',
                           // label: formFieldData.label ,
                          // name: 'name',
                            displayField: 'text',
                            store:'slectStore'+'formpanel_'+k+q+formId,
                            valueField: 'text',
                         //   value : 'value',
                            width : '20%'
                            //labelWidth: lavelWidth,
                           //  margin: itemMargin,
                          //  label:formFieldData.label
                        };

                      //  console.log(opt);
                            //console.log( formFieldData.slctFldOptions);
                      //   Ext.getCmp('formpanel_'+k+formId).add(sel);



                         Ext.getCmp('formpanel_'+k+formId).add({
                                                xtype: 'panel',
                                                margin: 5,
                                                layout: {
                                                    type: 'hbox',
                                                    align: 'center'
                                                },
                                                items: [
                                                    {
                                                        xtype: 'label',
                                                        cls: 'forgotBtnCls',
                                                        html: formFieldData.label,
                                                        width: '80%'
                                                    },
                                                    sel
                                                ]
                                            }
                        );







                    }else {//Adding different type

                    if(formFieldData.type==='textfield' ){

                        if(formFieldData.label.length>20){
                        Ext.getCmp('formpanel_'+k+formId).add({
                        xtype: formFieldData.type,
                        width: width,
                        labelWidth: lavelWidth,
                        labelAlign: 'top',
                             margin: itemMargin,
                        label: formFieldData.label,
                        clearIcon: false,
                        //value: 'Friday',
                        placeHolder: formFieldData.placeHolder
                        //options: record.data.allfieldData[k].formField[q].slctFldOptions
                          }
                         );

                        }else{
                             Ext.getCmp('formpanel_'+k+formId).add({
                        xtype: formFieldData.type,
                        width: width,
                         labelAlign: 'top',
                        //labelWidth: lavelWidth,
                        clearIcon: false,
                        margin: itemMargin,
                        label: formFieldData.label,
                        //value: 'Friday',
                        placeHolder: formFieldData.placeHolder
                        //options: record.data.allfieldData[k].formField[q].slctFldOptions
                          }
                         );

                        }


                    }
                    else if(formFieldData.type==='datepickerfield'){


                      //  console.log( formFieldData.slctFldOptions);
                         Ext.getCmp('formpanel_'+k+formId).add({
                        xtype: formFieldData.type,
                        width:width,
                              labelAlign: 'top',
                        //labelWidth: lavelWidth,
                        label:formFieldData.label ,
                              margin: itemMargin,
                        placeHolder: 'mm/dd/yyyy',
                                                picker: {
                                                    yearFrom: 2010,
                                                    yearTo: 2025
                                                }

                          });



                    }else if(formFieldData.type==='selectfiled'){


                    //creating store for each select fields
                                var model = Ext.define('User', {
                                    extend: 'Ext.data.Model',
                                    config: {
                                    fields: [{
                                        name: 'text'

                                            }, {
                                           name: 'value'
                                            }]
                                        }
                                    });

                              var store= Ext.create("Ext.data.Store", {
                                storeId: "slectStore"+'formpanel_'+k+q+formId,
                                model: "User",
                                data: formFieldData.slctFldOptions
                                });

                        //console.log(Ext.getStore("slectStore"+'formpanel_'+k+q+formId));

                          //  var opt=Ext.JSON.encode(formFieldData.slctFldOptions);

                        var labelAlign;
                        if(formFieldData.label.length>20){
                            laelAlign='top';

                        }else{
                            labelAlign='left';
                        }


                        var sel={
                            xtype: 'selectfield',
                            label: formFieldData.label ,
                          // name: 'name',
                            displayField: 'text',
                            store:'slectStore'+'formpanel_'+k+q+formId,
                            valueField: 'text',
                         //   value : 'value',
                            width : width,
                           // labelWidth: lavelWidth,
                            labelAlign :'top',//labelAlign

                             margin: itemMargin,
                            label:formFieldData.label
                        };

                      //  console.log(opt);
                            //console.log( formFieldData.slctFldOptions);
                         Ext.getCmp('formpanel_'+k+formId).add(sel);



                    }


                    else if(record.data.allfieldData[k].formField[q].type==='radiofield'){



                        Ext.getCmp('formpanel_'+k+formId).add({
                        xtype: formFieldData.type,
                        width: width,
                        name : formFieldData.radioName,
                        labelWidth: '90%',
                        labelAlign: 'right',
                             margin: itemMargin,
                        label: formFieldData.label,
                        clearIcon: false,
                        //value: 'Friday',
                        placeHolder: formFieldData.placeHolder
                        //options: record.data.allfieldData[k].formField[q].slctFldOptions
                          }
                         );
                    }else if(formFieldData.type==='label'){
                        if(formFieldData.style){
                            var styl=formFieldData.style;
                        }else{
                              var styl='font-size: 12px;text-align: left;padding-left: 4px;color: gray;text-decoration: none;';
                        }



                      //  console.log( formFieldData);
                         Ext.getCmp('formpanel_'+k+formId).add({
                            xtype: formFieldData.type,
                              //  width:width,
                              //  labelWidth: lavelWidth,
                              //  margin: itemMargin,
                            style : styl,
                              html:'<span>'+formFieldData.label+'</span>'

                          });



                    }
                    else if(formFieldData.type==='checkboxfield'){
                    var label ;


                        if(formFieldData.label.length===''){
                            Ext.getCmp('formpanel_'+k+formId).add({
                                                xtype: formFieldData.type,
                                                width: width,
                                                label: ' &nbps;&nbps;&nbps;&nbps;&nbps;&nbps;&nbps;&nbps;',
                                                labelAlign: 'right',
                                                labelWidth: '90%'
                                            });

                        }else{

                        Ext.getCmp('formpanel_'+k+formId).add({
                                                xtype: formFieldData.type,
                                                width: width,
                                                label: formFieldData.label,
                                                labelAlign: 'right',
                                                labelWidth: '90%'
                                            });

                        }

                        //console.log( formFieldData);



                    }else if(formFieldData.type==='datetimepickerfield'){


                       // console.log( formFieldData);
                         Ext.getCmp('formpanel_'+k+formId).add({
                            xtype: 'datetimepickerfield',
                         //   name : '12hr',
                            label: formFieldData.label,
                             width:width,
                        labelWidth: lavelWidth,
                        margin: itemMargin,
                            value: new Date(),
                            dateTimeFormat : 'h:i:A',
                            picker: {
                                yearFrom: 1980,
                                minuteInterval : 1,
                                ampm : true,
                                slotOrder: ['hour','minute','ampm']
                            }
                         });



                    }
                        else if(formFieldData.type==='datetimepickerfieldWithTime'){


                       // console.log( formFieldData);
                         Ext.getCmp('formpanel_'+k+formId).add({
                            xtype: 'datetimepickerfield',
                           label: formFieldData.label,
                             width:width,
                        labelWidth: lavelWidth,
                        margin: itemMargin,
                            value: new Date(),
                            dateTimeFormat : 'Y-m-d H:i',
                            picker: {
                                yearFrom: 1980,
                                minuteInterval : 1,
                                ampm : false,
                                slotOrder: ['month', 'day', 'year','hour','minute']
                            }
                         });



                    }else if(formFieldData.type==='textareafield' ){

                        if(formFieldData.label.length>10){
                        Ext.getCmp('formpanel_'+k+formId).add(
                            {
                        xtype: formFieldData.type,
                       // width: width,
                       // labelWidth: lavelWidth,
                        labelAlign: 'top',
                        margin: itemMargin,
                        label: formFieldData.label,
                        style : ' white-space: nowrap; ',
                        clearIcon: false,
                        //value: 'Friday',
                        placeHolder: formFieldData.placeHolder
                        //options: record.data.allfieldData[k].formField[q].slctFldOptions
                          }
                         );

                        }else{
                          Ext.getCmp('formpanel_'+k+formId).add({
                                xtype: formFieldData.type,
                               // width: width,
                               // labelWidth: lavelWidth,
                                labelAlign: 'top',
                                clearIcon: false,
                                margin: itemMargin,
                                label: formFieldData.label,
                                //value: 'Friday',
                                placeHolder: formFieldData.placeHolder
                                //options: record.data.allfieldData[k].formField[q].slctFldOptions
                          }
                         );

                        }


                    }else if(formFieldData.type==='signaturefield' ){


                         Ext.getCmp('formpanel_'+k+formId).add({
                            xtype: 'signaturefield',
                              width:width,
                            //id: 'signatureField',
                           // margin : '20 20 20 20',   //border : 2px solid red; color : gray;
                            // html : '<div style="border: 2px solid red; font-size : 14px; padding-top : 5%; padding-bottom : 8%; margin-left : 15px; ">Tap to Draw Signature....</div>',
                            sigWidth: 300,

                            sigHeight: 200,
                              labelAlign: 'top',
                              labelWidth: '30%',
                          	label:'Tap Here to Draw Signature....'//,

                        });


                    }else if(formFieldData.type==='image'){











                        Ext.getCmp('formpanel_'+k+formId).add({
                                xtype: 'panel',
                                docked: 'top',
                                height: '15%',
                                margin: 5,
                                width: '100%',
                                layout: {
                                    type: 'hbox',
                                    align: 'center'
                                },
                                items: [
                                    {
                                        xtype: 'image',
                                        height: '100%',
                                        width: '40%',
                                        src: 'img/logo.png'
                                    },
                                    {
                                        xtype: 'button',
                                        handler: function(button, e) {
                                            console.log(this);
                                            console.log(this.parent.items.items[0]);




                                            document.addEventListener("deviceready",onDeviceReady,false);

                                            // PhoneGap is ready to be used!
                                            //
                                            function onDeviceReady() {

                                                try {
                                                    console.log('device ready');
                                                    console.log( this.parent.items.items[0].getSrc());
                                               // capture callback
                                                    var captureSuccess = function(mediaFiles) {
                                                    var i, path, len;
                                                    for (i = 0, len = mediaFiles.length; i < len; i += 1) {
                                                    path = mediaFiles[i].fullPath;
                                                    alert(path);
                                                    console.log( this.parent.items.items[0].getSrc());
                                                     this.parent.items.items[0].setSrc(path);
                                                    // do something interesting with the file
                                                    }
                                                    };

                                                        // capture error callback
                                                    var captureError = function(error) {
                                                    navigator.notification.alert('Error code: ' + error.code, null, 'Capture Error');
                                                    };

                                                    // start image capture
                                                    navigator.device.capture.captureImage(captureSuccess, captureError, {limit:1});

                                                }catch(e){
                                                    console.log(e);
                                                }









                                            //End Function


                                            }

                                        },
                                        cls: 'blueBtn',
                                        ui: 'plain',
                                        html: 'Add New Image',
                                        style : 'background: rgb(43, 72, 104);color: white; font-size: 12px;'

                                    }
                                ]
                            });
                   }//End image

               }//End Else
            }//End adding Q loop form fields in each form
           }//End K Loop



        //Adding Bottom tool bar

        Ext.getCmp(formId).add(
            {
                                xtype: 'panel',
                                cls: 'titleBar',
                                docked: 'bottom',
                                height: 50,
                                hidden: false,
                                layout: {
                                    type: 'hbox',
                                    align: 'center'
                                },
                                items: [
                                    {
                                        xtype: 'button',
                                        handler: function(button, e) {
                                               //Save/Cancel form

                                        },
                                        html: '<img class="imgBtnCls" src="img/save_icon.png"  /><p class="whiteBtn">Save</p>',
                                        id: 'formSave',
                                        ui: 'plain',
                                        width: '50px',
                                        text: ''
                                    },
                                    {
                                        xtype: 'spacer'
                                    },
                                    {
                                        xtype: 'button',
                                        handler: function(button, e) {
                                                   //Save/Cancel form
                                        },
                                        html: '<img style="width: 30%;" class="" src="img/upload_icon.png" /><p class="whiteBtn">Save & Upload</p>',
                                        id: 'formSave1',
                                        ui: 'plain',
                                        width: '85px',
                                        text: ''
                                    },
                                    {
                                        xtype: 'spacer'
                                    },
                                    {
                                        xtype: 'button',
                                        handler: function(button, e) {
                                            //Save/Cancel form

                                        },
                                        html: '<img src="img/cancel_icon.png"  class="imgBtnCls" /> <p class="whiteBtn">Cancel</p>',
                                        ui: 'plain',
                                        width: '50px'
                                    }
                                ]
                            });


        }//End check form Existance
         }//End else part



        }//End Else part of tracing existing Form



        //console.log(Ext.getCmp(formId));

        Ext.defer(function(){

        //Ext.getCmp(formId).hide();

        },2000);



        */
    },

    createStaticForm: function(record, formId) {
        //console.log(record);

        var rec=record;
        //console.log(record.data.formName.replace(/ /g,''));
        var formId=record.data.formName.replace(/ /g,'')+record.data.formId;


        //If form already created
        //if(Ext.getCmp(formId)){
            if(Ext.getCmp(record.data.quickLinkScreen.replace(/ /g,''))){

          //  Ext.getCmp('navMainView').setActiveItem(Ext.getCmp(formId));
            Ext.getCmp('navMainView').setActiveItem(Ext.getCmp(record.data.quickLinkScreen.replace(/ /g,'')));


        }else{

        var title= record.data.formName;
        var font;
            if(title.length>20){

                 font='font-size : 14px;';


                }else{
                     font='';
                }


        Ext.getCmp('navMainView').add({
                        xtype: 'container',
                        id:record.data.quickLinkScreen.replace(/ /g,''),
                        layout: {
                            type: 'vbox',
                            pack: 'center'
                        },
                       // padding : 5,
                        items: [
                            {
                                xtype: 'titlebar',
                                cls: [
                                    'titleBar',
                                    'fontFamilyCath'
                                ],
                                docked: 'top',

                                title: record.data.formName,
                                style : font,
                                items: [
                                    {
                                        xtype: 'button',
                                        /*
                                        handler: function(button, e) {

                                                },
                                                */
                                        listeners: {
                                            tap: function() {
                                             console.log(Ext.getCmp('navMainView'))   ;
                                                 //alert('s');
                                               //  Ext.getCmp('navMainView').setActiveItem(Ext.getCmp('menuCont'));
                                                 tekwave.app.getControllerInstances()['tekwave.controller.MainController'].navigation('menuCont');


                                    }//End itemTap

                                  },//end listners
                                        height: 30,
                                        html: '<img src="img/img/btn_menu.png" width="80%" height="80%" />',
                                        ui: 'plain',
                                        width: 50,

                                         id : record.data.quickLinkScreen.replace(/ /g,'')+'_2',
                                        text: ''
                                    },
                                    {
                                        xtype: 'button',
                                        align: 'right',
                                        ui: 'plain',
                                        iconAlign: 'right',
                                        id : record.data.quickLinkScreen.replace(/ /g,'')+'_1',
                                        iconCls: 'add',
                                         listeners: {
                                            tap: function() {
                                             addForm(formId);
                                                //   Ext.getCmp('navMainView').setActiveItem(Ext.getCmp(formId));

                                    }//End itemTap

                                  }//end listners
                                    }
                                ]
                            }
                    ]

        });
        //Grid View List of Static Form
         Ext.getCmp(record.data.quickLinkScreen.replace(/ /g,'')).add({
                                xtype: 'dataview',
                                height:'100%',
                                maxWidth: '100%',
                                width: '100%',
                                cls : 'backgrounWhite',
             /*
                                scrollable: {
                                    direction: 'vertical',
                                    directionLock: true
                                },
                                inline: {
                                    wrap: true
                                },
                                */
                                itemTpl: [
                                   /*
                                    '<div >',
                                    '<div> <span> Title</Span> <span>Name</span><span align="right">Time</span></div>',
                                    '<div><span>discriptions</span></div>'

                                   */
                                     //'<tpl if="{fromName} == \'Daily Report\'">',

                                   // '<tpl if="quickLinkScreen == &quot;Daily Report&quot;">',

                                    '<tpl for=".">',

                                    '<tpl if="quickLinkScreen == \'DailyReportListScreen\'">',
                                    '<div style="border-bottom: 1px solid gray; " class="fontFamilyCath">',
                                    '<div style="margin : 5px; ">',
                                    '<table style="width : 100%; " cl>',
                                    '<tr>',
                                    '<td>  Id </td>' ,
                                    '<td> Shift Date </td>' ,
                                    '<td style="float: right; font-size: 12px;"> Start Time </td>' ,//
                                    '<td rowspan=2 style="width : 5%;">  <img align="right" style=" width : 14px; height : 19px;" src="img/img/arrow_right.png"> </td>' ,
                                    '</td>',
                                    '</tr>',
                                    '<tr>',
                                    '<td colspan=3 style="color: gray; font-size: 12px;"> End Time </td>' ,
                                    '</td>',
                                    '</tr>',
                                    '</table>',
                                    '</div>',
                                    '</div>',
                                    '</tpl>',//Tpl for first form Daily Report


                                    '<tpl else if="quickLinkScreen == \'DarAndDarActivitieListScreen\'">',
                                    '<div style="border-bottom: 1px solid gray; " class="fontFamilyCath">',
                                    '<div style="margin : 5px; ">',
                                    '<table style="width : 100%; " cl>',
                                    '<tr>',
                                    '<td>  Id </td>' ,
                                    '<td> Start Time </td>' ,
                                    '<td style="float: right; font-size: 12px;"> 12:30 PM </td>' ,
                                    '<td rowspan=2 style="width : 5%;">  <img align="right" style=" width : 14px; height : 19px;" src="img/img/arrow_right.png"> </td>' ,
                                    '</td>',
                                    '</tr>',
                                    '<tr>',
                                    '<td colspan=3 style="color: gray; font-size: 12px;"> Created By, Created Date  </td>' ,
                                    '</td>',
                                    '</tr>',
                                    '</table>',
                                    '</div>',
                                    '</div>',
                                    '</tpl>', // TPL for DarAndDarActivitieListScreen

                                    '<tpl else if="quickLinkScreen == \'IncidentListScreen\'">',
                                    '<div style="border-bottom: 1px solid gray; " class="fontFamilyCath">',
                                    '<div style="margin : 5px; ">',
                                    '<table style="width : 100%; " cl>',
                                    '<tr>',
                                    '<td>  Id </td>' ,
                                    '<td>  Short Description </td>' ,
                                    '<td style="float: right; font-size: 12px;">  Incident Date/Time </td>' ,
                                    '<td rowspan=2 style="width : 5%;">  <img align="right" style=" width : 14px; height : 19px;" src="img/img/arrow_right.png"> </td>' ,
                                    '</td>',
                                    '</tr>',
                                    '<tr>',
                                    '<td colspan=3 style="color: gray; font-size: 12px;"> Created By, Location   </td>' ,
                                    '</td>',
                                    '</tr>',
                                    '</table>',
                                    '</div>',
                                    '</div>',
                                    '</tpl>', // TPL for IncidentListScreen


                                    '<tpl else if="quickLinkScreen == \'LogisticsInspectionListScreen\'">',
                                    '<div style="border-bottom: 1px solid gray; " class="fontFamilyCath">',
                                    '<div style="margin : 5px; ">',
                                    '<table style="width : 100%; " cl>',
                                    '<tr>',
                                    '<td>  Id </td>' ,
                                    '<td>   Driver Name </td>' ,
                                    '<td style="float: right; font-size: 12px;">   </td>' ,
                                    '<td rowspan=2 style="width : 5%;">  <img align="right" style=" width : 14px; height : 19px;" src="img/img/arrow_right.png"> </td>' ,
                                    '</td>',
                                    '</tr>',
                                    '<tr>',
                                    '<td colspan=3 style="color: gray; font-size: 12px;"> Arrival Date </td>' ,
                                    '</td>',
                                    '</tr>',
                                    '</table>',
                                    '</div>',
                                    '</div>',
                                    '</tpl>', // TPL for LogisticsInspectionListScreen

                                     '<tpl else if="quickLinkScreen == \'OdorOrDustListScreen\'">',
                                    '<div style="border-bottom: 1px solid gray; " class="fontFamilyCath">',
                                    '<div style="margin : 5px; ">',
                                    '<table style="width : 100%; " cl>',
                                    '<tr>',
                                    '<td>  Id </td>' ,
                                    '<td>   Location  </td>' ,
                                    '<td style="float: right; font-size: 12px;">    Date Reported </td>' ,
                                    '<td rowspan=2 style="width : 5%;">  <img align="right" style=" width : 14px; height : 19px;" src="img/img/arrow_right.png"> </td>' ,
                                    '</td>',
                                    '</tr>',
                                    '<tr>',
                                    '<td colspan=3 style="color: gray; font-size: 12px;">Reported By, Issue Type, Level  </td>' ,
                                    '</td>',
                                    '</tr>',
                                    '</table>',
                                    '</div>',
                                    '</div>',
                                    '</tpl>', // TPL for OdorOrDustListScreen

                                    '<tpl else if="quickLinkScreen == \'OfficerComplianceListScreen\'">',
                                    '<div style="border-bottom: 1px solid gray; " class="fontFamilyCath">',
                                    '<div style="margin : 5px; ">',
                                    '<table style="width : 100%; " cl>',
                                    '<tr>',
                                    '<td>  Id </td>' ,
                                    '<td>   Account   </td>' ,
                                    '<td style="float: right; font-size: 12px;">    Officer  </td>' ,
                                    '<td rowspan=2 style="width : 5%;">  <img align="right" style=" width : 14px; height : 19px;" src="img/img/arrow_right.png"> </td>' ,
                                    '</td>',
                                    '</tr>',
                                    '<tr>',
                                    '<td colspan=3 style="color: gray; font-size: 12px;">Officer, Started  </td>' ,
                                    '</td>',
                                    '</tr>',
                                    '</table>',
                                    '</div>',
                                    '</div>',
                                    '</tpl>', // TPL for OfficerComplianceListScreen


                                    '<tpl else if="quickLinkScreen == \'PassdownLogsListScreen\'">',
                                    '<div style="border-bottom: 1px solid gray; " class="fontFamilyCath">',
                                    '<div style="margin : 5px; ">',
                                    '<table style="width : 100%; " cl>',
                                    '<tr>',
                                    '<td>  Id </td>' ,
                                    '<td>      </td>' ,
                                    '<td style="float: right; font-size: 12px;">     Date / Time  </td>' ,
                                    '<td rowspan=2 style="width : 5%;">  <img align="right" style=" width : 14px; height : 19px;" src="img/img/arrow_right.png"> </td>' ,
                                    '</td>',
                                    '</tr>',
                                    '<tr>',
                                    '<td colspan=3 style="color: gray; font-size: 12px;">Notes .....</td>' ,
                                    '</td>',
                                    '</tr>',
                                    '</table>',
                                    '</div>',
                                    '</div>',
                                    '</tpl>', // TPL for PassdownLogsListScreen

                                    '<tpl else if="quickLinkScreen == \'PostInspectionListScreen\'">',
                                    '<div style="border-bottom: 1px solid gray; " class="fontFamilyCath">',
                                    '<div style="margin : 5px; ">',
                                    '<table style="width : 100%; " cl>',
                                    '<tr>',
                                    '<td>  Id </td>' ,
                                    '<td>      </td>' ,
                                    '<td style="float: right; font-size: 12px;">     Date Created  </td>' ,
                                    '<td rowspan=2 style="width : 5%;">  <img align="right" style=" width : 14px; height : 19px;" src="img/img/arrow_right.png"> </td>' ,
                                    '</td>',
                                    '</tr>',
                                    '<tr>',
                                    '<td colspan=3 style="color: gray; font-size: 12px;"> Officer Name, Supervisor Name</td>' ,
                                    '</td>',
                                    '</tr>',
                                    '</table>',
                                    '</div>',
                                    '</div>',
                                    '</tpl>', // TPL for PostInspectionListScreen


                                    '<tpl else if="quickLinkScreen == \'ProgressiveCounselingListScreen\'">',
                                    '<div style="border-bottom: 1px solid gray; " class="fontFamilyCath">',
                                    '<div style="margin : 5px; ">',
                                    '<table style="width : 100%; " cl>',
                                    '<tr>',
                                    '<td>  Id </td>' ,
                                    '<td>    Officer Name   </td>' ,
                                    '<td style="float: right; font-size: 12px;">     Date Created  </td>' ,
                                    '<td rowspan=2 style="width : 5%;">  <img align="right" style=" width : 14px; height : 19px;" src="img/img/arrow_right.png"> </td>' ,
                                    '</td>',
                                    '</tr>',
                                    '<tr>',
                                    '<td colspan=3 style="color: gray; font-size: 12px;">   Supervisor Name </td>' ,
                                    '</td>',
                                    '</tr>',
                                    '</table>',
                                    '</div>',
                                    '</div>',
                                    '</tpl>', // TPL for ProgressiveCounselingListScreen

                                    '<tpl else if="quickLinkScreen == \'UnusualIncidentListScreen\'">',
                                    '<div style="border-bottom: 1px solid gray; " class="fontFamilyCath">',
                                    '<div style="margin : 5px; ">',
                                    '<table style="width : 100%; " cl>',
                                    '<tr>',
                                    '<td>  Id </td>' ,
                                    '<td>    Account Number  </td>' ,
                                    '<td style="float: right; font-size: 12px;">     Date / Time  </td>' ,
                                    '<td rowspan=2 style="width : 5%;">  <img align="right" style=" width : 14px; height : 19px;" src="img/img/arrow_right.png"> </td>' ,
                                    '</td>',
                                    '</tr>',
                                    '<tr>',
                                    '<td colspan=3 style="color: gray; font-size: 12px;">   Reported By </td>' ,
                                    '</td>',
                                    '</tr>',
                                    '</table>',
                                    '</div>',
                                    '</div>',
                                    '</tpl>', // TPL for UnusualIncidentListScreen


                                    '<tpl else if="quickLinkScreen == \'VisitorListScreen\'">',
                                    '<div style="border-bottom: 1px solid gray; " class="fontFamilyCath">',
                                    '<div style="margin : 5px; ">',
                                    '<table style="width : 100%; " cl>',
                                    '<tr>',
                                    '<td>  Id </td>' ,
                                    '<td>  </td>' ,
                                    '<td style="float: right; font-size: 12px;">   Schedule Date  </td>' ,
                                    '<td rowspan=2 style="width : 5%;">  <img align="right" style=" width : 14px; height : 19px;" src="img/img/arrow_right.png"> </td>' ,
                                    '</td>',
                                    '</tr>',
                                    '<tr>',
                                    '<td colspan=3 style="color: gray; font-size: 12px;">  First Name, Last Name </td>' ,
                                    '</td>',
                                    '</tr>',
                                    '</table>',
                                    '</div>',
                                    '</div>',
                                    '</tpl>', // TPL for VisitorListScreen


                                     '<tpl else if="quickLinkScreen == \'WindSpeedDirctionListScreen\'">',
                                    '<div style="border-bottom: 1px solid gray; " class="fontFamilyCath">',
                                    '<div style="margin : 5px; ">',
                                    '<table style="width : 100%; " cl>',
                                    '<tr>',
                                    '<td>  Id </td>' ,
                                    '<td> Day Of Week </td>' ,
                                    '<td style="float: right; font-size: 12px;">   Date / Time  </td>' ,
                                    '<td rowspan=2 style="width : 5%;">  <img align="right" style=" width : 14px; height : 19px;" src="img/img/arrow_right.png"> </td>' ,
                                    '</td>',
                                    '</tr>',
                                    '<tr>',
                                    '<td colspan=3 style="color: gray; font-size: 12px;">  Created By </td>' ,
                                    '</td>',
                                    '</tr>',
                                    '</table>',
                                    '</div>',
                                    '</div>',
                                    '</tpl>', // TPL for WindSpeedDirctionListScreen


                                    '</tpl>'//end tpl for="."

                                           /*

                                             '<tpl if="formName &eq; "Daily Report" ">',
                                    '<p>Name</p>',
                                    '<p>sdf</p>',
                                    '</tpl>',


                                    '<div class="staticListSection" >',
                                    '    <div class="staticListdiv"> <p> Id </p> </div>',
                                    '    <div class="staticListdiv"> <p> Short Discription </p> </div>',
                                    '    <div class="staticListdiv"> <p> Incident Date/Time </p> </div>',
                                    '    <div class="staticListdiv"> <p> Created By </p> </div>',
                                    '    <div class="staticListBdr"> <p> Location </p> </div>',
                                    ' </div>'


                                    '<div align="center" class= "gridlistHead" style="">',
                                    '    <div  class="gridlistSection" style="">',
                                    '        <p class="dataViewFontCls fontFamilyCath">{data1}</p>',
                                    '        <img class="homeList" style="" src="{icon}" />',
                                    '        <p class="dataViewFontCls fontFamilyCath">{name}</p>',
                                    '    </div>',
                                    '    <div  class="smallFont2 fontFamilyCath">',
                                    '        {type}',
                                    '    </div>',
                                    '</div>'
                                    */
                                ],
                                store: 'formStaticField',
                                listeners: {
                                    itemtap: function(dataview, index, target, record,e, eOpts) {

                                        console.log(record);
                                        //Ext.getCmp('navMainView').setActiveItem(Ext.getCmp(formId));

                                        //Add Form Local Function
                                       // addForm(formId);




                                           tekwave.app.getControllerInstances()['tekwave.controller.staticForm'].formDetailedView(rec, formId);

                                    }//End itemTap

                                  }//end listners
                            });//End Grid View List of Static Form



         //   console.log(Ext.getCmp(record.data.quickLinkScreen.replace(/ /g,'')));












































            //************************************************//
        //Adding Form

            function addForm(formId){
                console.log(formId);
                if(Ext.getCmp(formId)){

                    Ext.getCmp('navMainView').setActiveItem(Ext.getCmp(formId));
            }else{



                Ext.getCmp('navMainView').add({
                        xtype: 'container',
                        id: formId,
                        layout: {
                            type: 'vbox',
                            pack: 'center'
                        },
                       // padding : 5,
                        items: [
                            {
                                xtype: 'titlebar',
                                cls: [
                                    'titleBar',
                                    'fontFamilyCath'
                                ],
                                docked: 'top',
                                title: record.data.formName,
                                style : font,
                                items: [
                                    {
                                        xtype: 'button',
                                        id : record.data.formName.replace(/ /g,'')+'_3',

                                         listeners: {
                                            tap: function(button,e, eOpts) {
                                            //alert('k');
                                                 //Ext.getCmp('navMainView').setActiveItem(Ext.getCmp('menuCont'));
                                            tekwave.app.getControllerInstances()['tekwave.controller.MainController'].navigation('menuCont');


                                            }//End itemTap
                                         },//End listner
                                        height: 30,
                                        html: '<img src="img/img/btn_menu.png" width="80%" height="80%" />',
                                        ui: 'plain',
                                        width: 50,
                                        text: ''
                                    }
                                ]
                            }
                    ]

        });



        Ext.getCmp(formId).add(

             {
                                xtype: 'panel',
                                height: '10%',
                                id: 'formCatTag'+formId,
                                layout: 'hbox',
                                cls : 'scrollerBar',//whitePnlBg

                                 /*
                                 items: [
                                    {
                                        xtype: 'button',
                                        handler: function(button, e) {

                                        },
                                        cls: 'lebelFont themeFontBlue fontFamilyCath',
                                        ui: 'plain',
                                        text: 'General'
                                    },
                                    {
                                        xtype: 'button',
                                        cls: 'lebelFont  fontFamilyCath',
                                        ui: 'plain',
                                        text: 'Questions'
                                    }
                                ]
                                */
                              scrollable: 'horizontal'
                            });




        Ext.getCmp(formId).add({
                                xtype: 'carousel',
                                height: '90%',
                                id : 'carousel'+formId,
                               listeners: {
                                initialize: function() {
                                    this.onBefore('activeitemchange', function(container, value, oldValue, eOpts) {

                                       // console.log('activeItem change');
                                       // console.log(container.getActiveIndex());
                                       // console.log(value);

                                       // console.log(Ext.getCmp('formCatTag'+formId).items.items);
                                        for(var a=0; a<Ext.getCmp('formCatTag'+formId).items.items.length; a++){

                                      //
                                            if(a===container.getActiveIndex()){
                                                //Scrolling menus
                                                Ext.getCmp('formCatTag'+formId).getScrollable().getScroller().scrollTo(Ext.getCmp('formCatTag'+formId).items.items[a].bodyElement.dom.offsetLeft ,  false, {type: 'slide', duration: '400', easing: 'linear'});

                                                 console.log(Ext.getCmp('formCatTag'+formId).items.items[a].bodyElement.dom.offsetLeft);
                                                Ext.getCmp('formCatTag'+formId).items.items[a].setCls('lebelFont themeFontBlue fontFamilyCath underLine');

                                            }else{
                                                Ext.getCmp('formCatTag'+formId).items.items[a].setCls('lebelFont fontFamilyCath');
                                            }


                                        }


                                        //Customize button Css



                                        /////



                                });
                                }
                                },
                                indicator: false
                            });






















            //Adding forms and top sectional navigation
            for(var k=0; k<record.data.allfieldData.length; k++){
                var cls;

                if(k===0){ cls='lebelFont themeFontBlue fontFamilyCath underLine';}
                else{ cls='lebelFont  fontFamilyCath'; }

                Ext.getCmp('formCatTag'+formId).add( {
                                        xtype: 'button',
                                        handler: function(button, e) {
                                            //change the pane
                                            //console.log(this.bodyElement.dom.offsetLeft+' '+this.bodyElement.dom.offsetWidth);
                                           //console.log(Ext.getCmp('formCatTag'+formId).getScrollable().getScroller().scrollTo(this.bodyElement.dom.offsetLeft ,  false, {type: 'slide', duration: '400', easing: 'linear'}));
                                            Ext.getCmp('formCatTag'+formId).getScrollable().getScroller().scrollTo(this.bodyElement.dom.offsetLeft ,  false, {type: 'slide', duration: '400', easing: 'linear'});
                                          //  console.log(this);

                                           // console.log( Ext.getCmp('carousel'+formId));
                                          // button.getScroller().scroller.scrollTo(0, 0);
                                            for(var j=0; j<button.parent.items.items.length; j++){
                                                if(button.id===button.parent.items.items[j].id){

                                                    Ext.getCmp('carousel'+formId).setActiveItem(j);
                                                    button.setCls('lebelFont themeFontBlue fontFamilyCath underLine');
                                                }else{
                                                    //console.log('else');
                                                    button.parent.items.items[j].setCls('lebelFont fontFamilyCath');
                                                }


                                            }//tracing button Position

                                           // console.log(button);

                                        },
                                        cls: cls,
                                        ui: 'plain',
                                        html : '<div class="">'+record.data.allfieldData[k].section+'</div>'
                                      // html : '<div class="arrow_box">'+record.data.allfieldData[k].section+'</div>'
                                       // text: record.data.allfieldData[k].section
                                    });


                //Adding Forms
                Ext.getCmp('carousel'+formId).add({
                        xtype: 'formpanel',
                        id : 'formpanel_'+k+formId,
                        height: '100%',
                        padding: 10,
                        layout: 'vbox',
                        scrollable: 'vertical'

                    /*
                    padding: 10,
                                        scrollable: 'vertical',
                                        layout: {
                                            type: 'vbox',
                                            align: 'center'
                                        }
                                        */
                    });










                var width='95%';
                var itemMargin=4;
                var lavelWidth='40%';
                //Adding different type sencha form fields like textfield, textare etc...
                for (var q=0; q<record.data.allfieldData[k].formField.length; q++){
                    var formFieldData=record.data.allfieldData[k].formField[q];
                  // console.log(formFieldData.type);







                    if(record.data.allfieldData[k].section==='Questions'){
                      //   console.log(formFieldData.type);
                     //   console.log(formFieldData.slctFldOptions);
                        //creating store for each select fields
                                var model = Ext.define('User', {
                                    extend: 'Ext.data.Model',
                                    config: {
                                    fields: [{
                                        name: 'text'

                                            }, {
                                           name: 'value'
                                            }]
                                        }
                                    });

                              var store= Ext.create("Ext.data.Store", {
                                storeId: "slectStore"+'formpanel_'+k+q+formId,
                                model: "User",
                                data: formFieldData.slctFldOptions
                                });

                      //  console.log(Ext.getStore("slectStore"+'formpanel_'+k+q+formId));

                          //  var opt=Ext.JSON.encode(formFieldData.slctFldOptions);


                        var sel={
                            xtype: 'selectfield',
                           // label: formFieldData.label ,
                          // name: 'name',
                            displayField: 'text',
                            store:'slectStore'+'formpanel_'+k+q+formId,
                            valueField: 'text',
                         //   value : 'value',
                            width : '20%'
                            //labelWidth: lavelWidth,
                           //  margin: itemMargin,
                          //  label:formFieldData.label
                        };

                      //  console.log(opt);
                            //console.log( formFieldData.slctFldOptions);
                      //   Ext.getCmp('formpanel_'+k+formId).add(sel);

                        /*
                         Ext.getCmp('formpanel_'+k+formId).add({
                        xtype: formFieldData.type,
                        width: width,
                        name : formFieldData.radioName,
                        labelWidth: '90%',
                        labelAlign: 'right',
                        margin: itemMargin,
                        label: formFieldData.label,
                        clearIcon: false,
                        //value: 'Friday',
                        placeHolder: formFieldData.placeHolder
                        //options: record.data.allfieldData[k].formField[q].slctFldOptions
                          }
                         );
                        */

                         Ext.getCmp('formpanel_'+k+formId).add({
                                                xtype: 'panel',
                                                margin: 5,
                                                layout: {
                                                    type: 'hbox',
                                                    align: 'center'
                                                },
                                                items: [
                                                    {
                                                        xtype: 'label',
                                                        cls: 'forgotBtnCls',
                                                        html: formFieldData.label,
                                                        width: '80%'
                                                    },
                                                    sel
                                                ]
                                            }
                        );







                    }else {//Adding different type

                    if(formFieldData.type==='textfield' ){

                        if(formFieldData.label.length>20){
                        Ext.getCmp('formpanel_'+k+formId).add({
                        xtype: formFieldData.type,
                        width: width,
                        labelWidth: lavelWidth,
                        labelAlign: 'top',
                             margin: itemMargin,
                        label: formFieldData.label,
                        clearIcon: false,
                        //value: 'Friday',
                        placeHolder: formFieldData.placeHolder
                        //options: record.data.allfieldData[k].formField[q].slctFldOptions
                          }
                         );

                        }else{
                             Ext.getCmp('formpanel_'+k+formId).add({
                        xtype: formFieldData.type,
                        width: width,
                         labelAlign: 'top',
                        //labelWidth: lavelWidth,
                        clearIcon: false,
                        margin: itemMargin,
                        label: formFieldData.label,
                        //value: 'Friday',
                        placeHolder: formFieldData.placeHolder
                        //options: record.data.allfieldData[k].formField[q].slctFldOptions
                          }
                         );

                        }


                    }
                    else if(formFieldData.type==='datepickerfield'){


                      //  console.log( formFieldData.slctFldOptions);
                         Ext.getCmp('formpanel_'+k+formId).add({
                        xtype: formFieldData.type,
                        width:width,
                              labelAlign: 'top',
                        //labelWidth: lavelWidth,
                        label:formFieldData.label ,
                              margin: itemMargin,
                        placeHolder: 'mm/dd/yyyy',
                                                picker: {
                                                    yearFrom: 2010,
                                                    yearTo: 2025
                                                }

                          });



                    }else if(formFieldData.type==='selectfiled'){


                    //creating store for each select fields
                                var model = Ext.define('User', {
                                    extend: 'Ext.data.Model',
                                    config: {
                                    fields: [{
                                        name: 'text'

                                            }, {
                                           name: 'value'
                                            }]
                                        }
                                    });

                              var store= Ext.create("Ext.data.Store", {
                                storeId: "slectStore"+'formpanel_'+k+q+formId,
                                model: "User",
                                data: formFieldData.slctFldOptions
                                });

                        //console.log(Ext.getStore("slectStore"+'formpanel_'+k+q+formId));

                          //  var opt=Ext.JSON.encode(formFieldData.slctFldOptions);

                        var labelAlign;
                        if(formFieldData.label.length>20){
                            laelAlign='top';

                        }else{
                            labelAlign='left';
                        }


                        var sel={
                            xtype: 'selectfield',
                            label: formFieldData.label ,
                          // name: 'name',
                            displayField: 'text',
                            store:'slectStore'+'formpanel_'+k+q+formId,
                            valueField: 'text',
                         //   value : 'value',
                            width : width,
                           // labelWidth: lavelWidth,
                            labelAlign :'top',//labelAlign

                             margin: itemMargin,
                            label:formFieldData.label
                        };

                      //  console.log(opt);
                            //console.log( formFieldData.slctFldOptions);
                         Ext.getCmp('formpanel_'+k+formId).add(sel);



                    }


                    else if(record.data.allfieldData[k].formField[q].type==='radiofield'){



                        Ext.getCmp('formpanel_'+k+formId).add({
                        xtype: formFieldData.type,
                        width: width,
                        name : formFieldData.radioName,
                        labelWidth: '90%',
                        labelAlign: 'right',
                             margin: itemMargin,
                        label: formFieldData.label,
                        clearIcon: false,
                        //value: 'Friday',
                        placeHolder: formFieldData.placeHolder
                        //options: record.data.allfieldData[k].formField[q].slctFldOptions
                          }
                         );
                    }else if(formFieldData.type==='label'){
                        if(formFieldData.style){
                            var styl=formFieldData.style;
                        }else{
                              var styl='font-size: 12px;text-align: left;padding-left: 4px;color: gray;text-decoration: none;';
                        }



                      //  console.log( formFieldData);
                         Ext.getCmp('formpanel_'+k+formId).add({
                            xtype: formFieldData.type,
                              //  width:width,
                              //  labelWidth: lavelWidth,
                              //  margin: itemMargin,
                            style : styl,
                              html:'<span>'+formFieldData.label+'</span>'

                          });



                    }
                    else if(formFieldData.type==='checkboxfield'){
                    var label ;


                        if(formFieldData.label.length===''){
                            Ext.getCmp('formpanel_'+k+formId).add({
                                                xtype: formFieldData.type,
                                                width: width,
                                                label: ' &nbps;&nbps;&nbps;&nbps;&nbps;&nbps;&nbps;&nbps;',
                                                labelAlign: 'right',
                                                labelWidth: '90%'
                                            });

                        }else{

                        Ext.getCmp('formpanel_'+k+formId).add({
                                                xtype: formFieldData.type,
                                                width: width,
                                                label: formFieldData.label,
                                                labelAlign: 'right',
                                                labelWidth: '90%'
                                            });

                        }

                        //console.log( formFieldData);



                    }else if(formFieldData.type==='datetimepickerfield'){


                       // console.log( formFieldData);
                         Ext.getCmp('formpanel_'+k+formId).add({
                            xtype: 'datetimepickerfield',
                         //   name : '12hr',
                            label: formFieldData.label,
                             width:width,
                        labelWidth: lavelWidth,
                        margin: itemMargin,
                            value: new Date(),
                            dateTimeFormat : 'h:i:A',
                            picker: {
                                yearFrom: 1980,
                                minuteInterval : 1,
                                ampm : true,
                                slotOrder: ['hour','minute','ampm']
                            }
                         });



                    }
                        else if(formFieldData.type==='datetimepickerfieldWithTime'){


                       // console.log( formFieldData);
                         Ext.getCmp('formpanel_'+k+formId).add({
                            xtype: 'datetimepickerfield',
                           label: formFieldData.label,
                             width:width,
                        labelWidth: lavelWidth,
                        margin: itemMargin,
                            value: new Date(),
                            dateTimeFormat : 'Y-m-d H:i',
                            picker: {
                                yearFrom: 1980,
                                minuteInterval : 1,
                                ampm : false,
                                slotOrder: ['month', 'day', 'year','hour','minute']
                            }
                         });



                    }else if(formFieldData.type==='textareafield' ){

                        if(formFieldData.label.length>10){
                        Ext.getCmp('formpanel_'+k+formId).add(
                            {
                        xtype: formFieldData.type,
                       // width: width,
                       // labelWidth: lavelWidth,
                        labelAlign: 'top',
                        margin: itemMargin,
                        label: formFieldData.label,
                        style : ' white-space: nowrap; ',
                        clearIcon: false,
                        //value: 'Friday',
                        placeHolder: formFieldData.placeHolder
                        //options: record.data.allfieldData[k].formField[q].slctFldOptions
                          }
                         );

                        }else{
                          Ext.getCmp('formpanel_'+k+formId).add({
                                xtype: formFieldData.type,
                               // width: width,
                               // labelWidth: lavelWidth,
                                labelAlign: 'top',
                                clearIcon: false,
                                margin: itemMargin,
                                label: formFieldData.label,
                                //value: 'Friday',
                                placeHolder: formFieldData.placeHolder
                                //options: record.data.allfieldData[k].formField[q].slctFldOptions
                          }
                         );

                        }


                    }else if(formFieldData.type==='signaturefield' ){


                         Ext.getCmp('formpanel_'+k+formId).add({
                            xtype: 'signaturefield',
                              width:width,
                            //id: 'signatureField',
                           // margin : '20 20 20 20',   //border : 2px solid red; color : gray;
                            // html : '<div style="border: 2px solid red; font-size : 14px; padding-top : 5%; padding-bottom : 8%; margin-left : 15px; ">Tap to Draw Signature....</div>',
                            sigWidth: 300,

                            sigHeight: 200,
                              labelAlign: 'top',
                              labelWidth: '30%',
                          	label:'Tap Here to Draw Signature....'//,

                        });


                    }else if(formFieldData.type==='image'){











                        Ext.getCmp('formpanel_'+k+formId).add({
                                xtype: 'panel',
                                docked: 'top',
                                height: '15%',
                                margin: 5,
                                width: '100%',
                                layout: {
                                    type: 'hbox',
                                    align: 'center'
                                },
                                items: [
                                    {
                                        xtype: 'image',
                                        height: '100%',
                                        width: '40%',
                                        src: 'img/logo.png'
                                    },
                                    {
                                        xtype: 'button',
                                        handler: function(button, e) {
                                            console.log(this);
                                            console.log(this.parent.items.items[0]);




                                            document.addEventListener("deviceready",onDeviceReady,false);

                                            // PhoneGap is ready to be used!
                                            //
                                            function onDeviceReady() {

                                                try {
                                                    console.log('device ready');
                                                    console.log( this.parent.items.items[0].getSrc());
                                               // capture callback
                                                    var captureSuccess = function(mediaFiles) {
                                                    var i, path, len;
                                                    for (i = 0, len = mediaFiles.length; i < len; i += 1) {
                                                    path = mediaFiles[i].fullPath;
                                                    alert(path);
                                                    console.log( this.parent.items.items[0].getSrc());
                                                     this.parent.items.items[0].setSrc(path);
                                                    // do something interesting with the file
                                                    }
                                                    };

                                                        // capture error callback
                                                    var captureError = function(error) {
                                                    navigator.notification.alert('Error code: ' + error.code, null, 'Capture Error');
                                                    };

                                                    // start image capture
                                                    navigator.device.capture.captureImage(captureSuccess, captureError, {limit:1});

                                                }catch(e){
                                                    console.log(e);
                                                }



                                                 /*

                                              //  Take a photo and retrieve it as a base64-encoded image:

                                                navigator.camera.getPicture(onSuccess, onFail, { quality: 50,
                                                    destinationType: Camera.DestinationType.DATA_URL
                                                });

                                                function onSuccess(imageData) {
                                                    alert(imageData);
                                                  console.log(imageData);
                                                    var src = "data:image/jpeg;base64," + imageData;
                                                    this.parent.items.items[0].setSrc(src);
                                                }

                                                function onFail(message) {
                                                    alert('Failed because: ' + message);
                                                }


                                                //Take a photo and retrieve the image's file location:

                                                navigator.camera.getPicture(onSuccess, onFail, { quality: 50,
                                                    destinationType: Camera.DestinationType.FILE_URI });

                                                function onSuccess(imageURI) {
                                                    var image = document.getElementById('myImage');
                                                    image.src = imageURI;
                                                }
                                                function onFail(message) {
                                                    alert('Failed because: ' + message);
                                                }
                                                */

                                                 /*
                                                    //CameraOptions

                                                    //Optional parameters to customize the camera settings.

                                                    { quality : 75,
                                                      destinationType : Camera.DestinationType.DATA_URL,
                                                      sourceType : Camera.PictureSourceType.CAMERA,
                                                      allowEdit : true,
                                                      encodingType: Camera.EncodingType.JPEG,
                                                      targetWidth: 100,
                                                      targetHeight: 100,
                                                      popoverOptions: CameraPopoverOptions,
                                                      saveToPhotoAlbum: false };
                                                    */





                                                 /*

                                                var captureSuccess = function(mediaFiles) {
                                                    var i, path, len;
                                                    for (i = 0, len = mediaFiles.length; i < len; i += 1) {
                                                        path = mediaFiles[i].fullPath;
                                                        console.log(path);
                                                        console.log(this.parent.items.items[0].setSrc(path));


                                                        //this.parents
                                                        // do something interesting with the file
                                                    }
                                                };

                                                // capture error callback
                                                var captureError = function(error) {
                                                    navigator.notification.alert('Error code: ' + error.code, null, 'Capture Error');
                                                };

                                                // start image capture
                                                navigator.device.capture.captureImage(captureSuccess, captureError, {limit:1});
                                                */

                                            //End Function


                                            }

                                        },
                                        cls: 'blueBtn',
                                        ui: 'plain',
                                        html: 'Add New Image',
                                        style : 'background: rgb(43, 72, 104);color: white; font-size: 12px;'

                                    }
                                ]
                            });
                   }//End image

               }//End Else
            }//End adding Q loop form fields in each form
           }//End K Loop



        //Adding Bottom tool bar

        Ext.getCmp(formId).add(
            {
                                xtype: 'panel',
                                cls: 'titleBar',
                                docked: 'bottom',
                                height: 50,
                                hidden: false,
                                layout: {
                                    type: 'hbox',
                                    align: 'center'
                                },
                                items: [
                                    {
                                        xtype: 'button',
                                        handler: function(button, e) {
                                               //Save/Cancel form

                                        },
                                        html: '<img class="imgBtnCls" src="img/save_icon.png"  /><p class="whiteBtn">Save</p>',
                                        id: 'formSave',
                                        ui: 'plain',
                                        width: '50px',
                                        text: ''
                                    },
                                    {
                                        xtype: 'spacer'
                                    },
                                    {
                                        xtype: 'button',
                                        handler: function(button, e) {
                                                   //Save/Cancel form
                                        },
                                        html: '<img style="width: 30%;" class="" src="img/upload_icon.png" /><p class="whiteBtn">Save & Upload</p>',
                                        id: 'formSave1',
                                        ui: 'plain',
                                        width: '85px',
                                        text: ''
                                    },
                                    {
                                        xtype: 'spacer'
                                    },
                                    {
                                        xtype: 'button',
                                        handler: function(button, e) {
                                            //Save/Cancel form

                                        },
                                        html: '<img src="img/cancel_icon.png"  class="imgBtnCls" /> <p class="whiteBtn">Cancel</p>',
                                        ui: 'plain',
                                        width: '50px'
                                    }
                                ]
                            });


        }//End check form Existance
         }//End else part



        }//End Else part of tracing existing Form



    },

    addForm: function(record, formId) {
        var title= record.data.formName;
        var font;
            if(title.length>20){

                 font='font-size : 14px;';


                }else{
                     font='';
                }



        //console.log(formId);
                if(Ext.getCmp(formId)){

                    Ext.getCmp('navMainView').setActiveItem(Ext.getCmp(formId));
            }else{



                Ext.getCmp('navMainView').add({
                        xtype: 'container',
                        id: formId,
                        layout: {
                            type: 'vbox',
                            pack: 'center'
                        },
                       // padding : 5,
                        items: [
                            {
                                xtype: 'titlebar',
                                cls: [
                                    'titleBar',
                                    'fontFamilyCath'
                                ],
                                docked: 'top',
                                title: record.data.formName,
                                style : font,
                                items: [
                                    {
                                        xtype: 'button',
                                        id : record.data.formName.replace(/ /g,'')+'_3',

                                         listeners: {
                                            tap: function(button,e, eOpts) {
                                            //alert('k');
                                                 //Ext.getCmp('navMainView').setActiveItem(Ext.getCmp('menuCont'));
                                            tekwave.app.getControllerInstances()['tekwave.controller.MainController'].navigation('menuCont');


                                            }//End itemTap
                                         },//End listner
                                        height: 30,
                                        html: '<img src="img/img/btn_menu.png" width="80%" height="80%" />',
                                        ui: 'plain',
                                        width: 50,
                                        text: ''
                                    }
                                ]
                            }
                    ]

        });



        Ext.getCmp(formId).add(

             {
                                xtype: 'panel',
                                height: '10%',
                                id: 'formCatTag'+formId,
                                layout: 'hbox',
                                cls : 'scrollerBar',//whitePnlBg

                                 /*
                                 items: [
                                    {
                                        xtype: 'button',
                                        handler: function(button, e) {

                                        },
                                        cls: 'lebelFont themeFontBlue fontFamilyCath',
                                        ui: 'plain',
                                        text: 'General'
                                    },
                                    {
                                        xtype: 'button',
                                        cls: 'lebelFont  fontFamilyCath',
                                        ui: 'plain',
                                        text: 'Questions'
                                    }
                                ]
                                */
                              scrollable: 'horizontal'
                            });




        Ext.getCmp(formId).add({
                                xtype: 'carousel',
                                height: '90%',
                                id : 'carousel'+formId,
                               listeners: {
                                initialize: function() {
                                    this.onBefore('activeitemchange', function(container, value, oldValue, eOpts) {

                                       // console.log('activeItem change');
                                       // console.log(container.getActiveIndex());
                                       // console.log(value);

                                       // console.log(Ext.getCmp('formCatTag'+formId).items.items);
                                        for(var a=0; a<Ext.getCmp('formCatTag'+formId).items.items.length; a++){

                                      //
                                            if(a===container.getActiveIndex()){
                                                //Scrolling menus
                                                Ext.getCmp('formCatTag'+formId).getScrollable().getScroller().scrollTo(Ext.getCmp('formCatTag'+formId).items.items[a].bodyElement.dom.offsetLeft ,  false, {type: 'slide', duration: '400', easing: 'linear'});

                                                 console.log(Ext.getCmp('formCatTag'+formId).items.items[a].bodyElement.dom.offsetLeft);
                                                Ext.getCmp('formCatTag'+formId).items.items[a].setCls('lebelFont themeFontBlue fontFamilyCath underLine');

                                            }else{
                                                Ext.getCmp('formCatTag'+formId).items.items[a].setCls('lebelFont fontFamilyCath');
                                            }


                                        }


                                        //Customize button Css



                                        /////



                                });
                                }
                                },
                                indicator: false
                            });






















            //Adding forms and top sectional navigation
            for(var k=0; k<record.data.allfieldData.length; k++){
                var cls;

                if(k===0){ cls='lebelFont themeFontBlue fontFamilyCath underLine';}
                else{ cls='lebelFont  fontFamilyCath'; }

                Ext.getCmp('formCatTag'+formId).add( {
                                        xtype: 'button',
                                        handler: function(button, e) {
                                            //change the pane
                                            //console.log(this.bodyElement.dom.offsetLeft+' '+this.bodyElement.dom.offsetWidth);
                                           //console.log(Ext.getCmp('formCatTag'+formId).getScrollable().getScroller().scrollTo(this.bodyElement.dom.offsetLeft ,  false, {type: 'slide', duration: '400', easing: 'linear'}));
                                            Ext.getCmp('formCatTag'+formId).getScrollable().getScroller().scrollTo(this.bodyElement.dom.offsetLeft ,  false, {type: 'slide', duration: '400', easing: 'linear'});
                                          //  console.log(this);

                                           // console.log( Ext.getCmp('carousel'+formId));
                                          // button.getScroller().scroller.scrollTo(0, 0);
                                            for(var j=0; j<button.parent.items.items.length; j++){
                                                if(button.id===button.parent.items.items[j].id){

                                                    Ext.getCmp('carousel'+formId).setActiveItem(j);
                                                    button.setCls('lebelFont themeFontBlue fontFamilyCath underLine');
                                                }else{
                                                    //console.log('else');
                                                    button.parent.items.items[j].setCls('lebelFont fontFamilyCath');
                                                }


                                            }//tracing button Position

                                           // console.log(button);

                                        },
                                        cls: cls,
                                        ui: 'plain',
                                        html : '<div class="">'+record.data.allfieldData[k].section+'</div>'
                                      // html : '<div class="arrow_box">'+record.data.allfieldData[k].section+'</div>'
                                       // text: record.data.allfieldData[k].section
                                    });


                var fromName='formpanel_'+k+formId;

                //Adding Forms
                Ext.getCmp('carousel'+formId).add({
                        xtype: 'formpanel',
                        id : fromName,
                        height: '100%',
                        padding: 10,
                        layout: 'vbox',
                        scrollable: 'vertical'

                    /*
                    padding: 10,
                                        scrollable: 'vertical',
                                        layout: {
                                            type: 'vbox',
                                            align: 'center'
                                        }
                                        */
                    });



                //Adding different type sencha form fields like textfield, textare etc...

                tekwave.app.getControllerInstances()['tekwave.controller.staticForm'].addFormField(record, formId, k);




           }//End K Loop



        //Adding Bottom tool bar

        Ext.getCmp(formId).add(
            {
                                xtype: 'panel',
                                cls: 'titleBar',
                                docked: 'bottom',
                                height: 50,
                                hidden: false,
                                layout: {
                                    type: 'hbox',
                                    align: 'center'
                                },
                                items: [
                                    {
                                        xtype: 'button',
                                        handler: function(button, e) {
                                               //Save/Cancel form

                                        },
                                        html: '<img class="imgBtnCls" src="img/save_icon.png"  /><p class="whiteBtn">Save</p>',
                                        id: 'formSave',
                                        ui: 'plain',
                                        width: '50px',
                                        text: ''
                                    },
                                    {
                                        xtype: 'spacer'
                                    },
                                    {
                                        xtype: 'button',
                                        handler: function(button, e) {
                                                   //Save/Cancel form
                                        },
                                        html: '<img style="width: 30%;" class="" src="img/upload_icon.png" /><p class="whiteBtn">Save & Upload</p>',
                                        id: 'formSave1',
                                        ui: 'plain',
                                        width: '85px',
                                        text: ''
                                    },
                                    {
                                        xtype: 'spacer'
                                    },
                                    {
                                        xtype: 'button',
                                        handler: function(button, e) {
                                            //Save/Cancel form

                                        },
                                        html: '<img src="img/cancel_icon.png"  class="imgBtnCls" /> <p class="whiteBtn">Cancel</p>',
                                        ui: 'plain',
                                        width: '50px'
                                    }
                                ]
                            });


        }//End check form Existance

    },

    addFormField: function(record, formId, k) {
        console.log('addFormField');

        var width='95%';
                var itemMargin=4;
                var lavelWidth='40%';
                //Adding different type sencha form fields like textfield, textare etc...
                for (var q=0; q<record.data.allfieldData[k].formField.length; q++){
                    var formFieldData=record.data.allfieldData[k].formField[q];
                  // console.log(formFieldData.type);







                    if(record.data.allfieldData[k].section==='Questions'){
                      //   console.log(formFieldData.type);
                     //   console.log(formFieldData.slctFldOptions);
                        //creating store for each select fields
                                var model = Ext.define('User', {
                                    extend: 'Ext.data.Model',
                                    config: {
                                    fields: [{
                                        name: 'text'

                                            }, {
                                           name: 'value'
                                            }]
                                        }
                                    });

                              var store= Ext.create("Ext.data.Store", {
                                storeId: "slectStore"+'formpanel_'+k+q+formId,
                                model: "User",
                                data: formFieldData.slctFldOptions
                                });

                      //  console.log(Ext.getStore("slectStore"+'formpanel_'+k+q+formId));

                          //  var opt=Ext.JSON.encode(formFieldData.slctFldOptions);


                        var sel={
                            xtype: 'selectfield',
                           // label: formFieldData.label ,
                          // name: 'name',
                            displayField: 'text',
                            store:'slectStore'+'formpanel_'+k+q+formId,
                            valueField: 'text',
                         //   value : 'value',
                            width : '20%'
                            //labelWidth: lavelWidth,
                           //  margin: itemMargin,
                          //  label:formFieldData.label
                        };

                      //  console.log(opt);
                            //console.log( formFieldData.slctFldOptions);
                      //   Ext.getCmp('formpanel_'+k+formId).add(sel);

                        /*
                         Ext.getCmp('formpanel_'+k+formId).add({
                        xtype: formFieldData.type,
                        width: width,
                        name : formFieldData.radioName,
                        labelWidth: '90%',
                        labelAlign: 'right',
                        margin: itemMargin,
                        label: formFieldData.label,
                        clearIcon: false,
                        //value: 'Friday',
                        placeHolder: formFieldData.placeHolder
                        //options: record.data.allfieldData[k].formField[q].slctFldOptions
                          }
                         );
                        */

                         Ext.getCmp('formpanel_'+k+formId).add({
                                                xtype: 'panel',
                                                margin: 5,
                                                layout: {
                                                    type: 'hbox',
                                                    align: 'center'
                                                },
                                                items: [
                                                    {
                                                        xtype: 'label',
                                                        cls: 'forgotBtnCls',
                                                        html: formFieldData.label,
                                                        width: '80%'
                                                    },
                                                    sel
                                                ]
                                            }
                        );







                    }else {//Adding different type

                    if(formFieldData.type==='textfield' ){

                        if(formFieldData.label.length>20){
                        Ext.getCmp('formpanel_'+k+formId).add({
                        xtype: formFieldData.type,
                        width: width,
                        labelWidth: lavelWidth,
                        labelAlign: 'top',
                             margin: itemMargin,
                        label: formFieldData.label,
                        clearIcon: false,
                        //value: 'Friday',
                        placeHolder: formFieldData.placeHolder
                        //options: record.data.allfieldData[k].formField[q].slctFldOptions
                          }
                         );

                        }else{
                             Ext.getCmp('formpanel_'+k+formId).add({
                        xtype: formFieldData.type,
                        width: width,
                         labelAlign: 'top',
                        //labelWidth: lavelWidth,
                        clearIcon: false,
                        margin: itemMargin,
                        label: formFieldData.label,
                        //value: 'Friday',
                        placeHolder: formFieldData.placeHolder
                        //options: record.data.allfieldData[k].formField[q].slctFldOptions
                          }
                         );

                        }


                    }
                    else if(formFieldData.type==='datepickerfield'){


                      //  console.log( formFieldData.slctFldOptions);
                         Ext.getCmp('formpanel_'+k+formId).add({
                        xtype: formFieldData.type,
                        width:width,
                              labelAlign: 'top',
                        //labelWidth: lavelWidth,
                        label:formFieldData.label ,
                              margin: itemMargin,
                        placeHolder: 'mm/dd/yyyy',
                                                picker: {
                                                    yearFrom: 2010,
                                                    yearTo: 2025
                                                }

                          });



                    }else if(formFieldData.type==='selectfiled'){


                    //creating store for each select fields
                                var model = Ext.define('User', {
                                    extend: 'Ext.data.Model',
                                    config: {
                                    fields: [{
                                        name: 'text'

                                            }, {
                                           name: 'value'
                                            }]
                                        }
                                    });

                              var store= Ext.create("Ext.data.Store", {
                                storeId: "slectStore"+'formpanel_'+k+q+formId,
                                model: "User",
                                data: formFieldData.slctFldOptions
                                });

                        //console.log(Ext.getStore("slectStore"+'formpanel_'+k+q+formId));

                          //  var opt=Ext.JSON.encode(formFieldData.slctFldOptions);

                        var labelAlign;
                        if(formFieldData.label.length>20){
                            laelAlign='top';

                        }else{
                            labelAlign='left';
                        }


                        var sel={
                            xtype: 'selectfield',
                            label: formFieldData.label ,
                          // name: 'name',
                            displayField: 'text',
                            store:'slectStore'+'formpanel_'+k+q+formId,
                            valueField: 'text',
                         //   value : 'value',
                            width : width,
                           // labelWidth: lavelWidth,
                            labelAlign :'top',//labelAlign

                             margin: itemMargin,
                            label:formFieldData.label
                        };

                      //  console.log(opt);
                            //console.log( formFieldData.slctFldOptions);
                         Ext.getCmp('formpanel_'+k+formId).add(sel);



                    }


                    else if(record.data.allfieldData[k].formField[q].type==='radiofield'){



                        Ext.getCmp('formpanel_'+k+formId).add({
                        xtype: formFieldData.type,
                        width: width,
                        name : formFieldData.radioName,
                        labelWidth: '90%',
                        labelAlign: 'right',
                             margin: itemMargin,
                        label: formFieldData.label,
                        clearIcon: false,
                        //value: 'Friday',
                        placeHolder: formFieldData.placeHolder
                        //options: record.data.allfieldData[k].formField[q].slctFldOptions
                          }
                         );
                    }else if(formFieldData.type==='label'){
                        if(formFieldData.style){
                            var styl=formFieldData.style;
                        }else{
                              var styl='font-size: 12px;text-align: left;padding-left: 4px;color: gray;text-decoration: none;';
                        }



                      //  console.log( formFieldData);
                         Ext.getCmp('formpanel_'+k+formId).add({
                            xtype: formFieldData.type,
                              //  width:width,
                              //  labelWidth: lavelWidth,
                              //  margin: itemMargin,
                            style : styl,
                              html:'<span>'+formFieldData.label+'</span>'

                          });



                    }
                    else if(formFieldData.type==='checkboxfield'){
                    var label ;


                        if(formFieldData.label.length===''){
                            Ext.getCmp('formpanel_'+k+formId).add({
                                                xtype: formFieldData.type,
                                                width: width,
                                                label: ' &nbps;&nbps;&nbps;&nbps;&nbps;&nbps;&nbps;&nbps;',
                                                labelAlign: 'right',
                                                labelWidth: '90%'
                                            });

                        }else{

                        Ext.getCmp('formpanel_'+k+formId).add({
                                                xtype: formFieldData.type,
                                                width: width,
                                                label: formFieldData.label,
                                                labelAlign: 'right',
                                                labelWidth: '90%'
                                            });

                        }

                        //console.log( formFieldData);



                    }else if(formFieldData.type==='datetimepickerfield'){


                       // console.log( formFieldData);
                         Ext.getCmp('formpanel_'+k+formId).add({
                            xtype: 'datetimepickerfield',
                         //   name : '12hr',
                            label: formFieldData.label,
                             width:width,
                        labelWidth: lavelWidth,
                        margin: itemMargin,
                            value: new Date(),
                            dateTimeFormat : 'h:i:A',
                            picker: {
                                yearFrom: 1980,
                                minuteInterval : 1,
                                ampm : true,
                                slotOrder: ['hour','minute','ampm']
                            }
                         });



                    }
                        else if(formFieldData.type==='datetimepickerfieldWithTime'){


                       // console.log( formFieldData);
                         Ext.getCmp('formpanel_'+k+formId).add({
                            xtype: 'datetimepickerfield',
                           label: formFieldData.label,
                             width:width,
                        labelWidth: lavelWidth,
                        margin: itemMargin,
                            value: new Date(),
                            dateTimeFormat : 'Y-m-d H:i',
                            picker: {
                                yearFrom: 1980,
                                minuteInterval : 1,
                                ampm : false,
                                slotOrder: ['month', 'day', 'year','hour','minute']
                            }
                         });



                    }else if(formFieldData.type==='textareafield' ){

                        if(formFieldData.label.length>10){
                        Ext.getCmp('formpanel_'+k+formId).add(
                            {
                        xtype: formFieldData.type,
                       // width: width,
                       // labelWidth: lavelWidth,
                        labelAlign: 'top',
                        margin: itemMargin,
                        label: formFieldData.label,
                        style : ' white-space: nowrap; ',
                        clearIcon: false,
                        //value: 'Friday',
                        placeHolder: formFieldData.placeHolder
                        //options: record.data.allfieldData[k].formField[q].slctFldOptions
                          }
                         );

                        }else{
                          Ext.getCmp('formpanel_'+k+formId).add({
                                xtype: formFieldData.type,
                               // width: width,
                               // labelWidth: lavelWidth,
                                labelAlign: 'top',
                                clearIcon: false,
                                margin: itemMargin,
                                label: formFieldData.label,
                                //value: 'Friday',
                                placeHolder: formFieldData.placeHolder
                                //options: record.data.allfieldData[k].formField[q].slctFldOptions
                          }
                         );

                        }


                    }else if(formFieldData.type==='signaturefield' ){


                         Ext.getCmp('formpanel_'+k+formId).add({
                            xtype: 'signaturefield',
                              width:width,
                            //id: 'signatureField',
                           // margin : '20 20 20 20',   //border : 2px solid red; color : gray;
                            // html : '<div style="border: 2px solid red; font-size : 14px; padding-top : 5%; padding-bottom : 8%; margin-left : 15px; ">Tap to Draw Signature....</div>',
                            sigWidth: 300,

                            sigHeight: 200,
                              labelAlign: 'top',
                              labelWidth: '30%',
                          	label:'Tap Here to Draw Signature....'//,

                        });


                    }else if(formFieldData.type==='image'){











                        Ext.getCmp('formpanel_'+k+formId).add({
                                xtype: 'panel',
                                docked: 'top',
                                height: '15%',
                                margin: 5,
                                width: '100%',
                                layout: {
                                    type: 'hbox',
                                    align: 'center'
                                },
                                items: [
                                    {
                                        xtype: 'image',
                                        height: '100%',
                                        width: '40%',
                                        src: 'img/logo.png'
                                    },
                                    {
                                        xtype: 'button',
                                        handler: function(button, e) {
                                            console.log(this);
                                            console.log(this.parent.items.items[0]);




                                            document.addEventListener("deviceready",onDeviceReady,false);

                                            // PhoneGap is ready to be used!
                                            //
                                            function onDeviceReady() {

                                                try {
                                                    console.log('device ready');
                                                    console.log( this.parent.items.items[0].getSrc());
                                               // capture callback
                                                    var captureSuccess = function(mediaFiles) {
                                                    var i, path, len;
                                                    for (i = 0, len = mediaFiles.length; i < len; i += 1) {
                                                    path = mediaFiles[i].fullPath;
                                                    alert(path);
                                                    console.log( this.parent.items.items[0].getSrc());
                                                     this.parent.items.items[0].setSrc(path);
                                                    // do something interesting with the file
                                                    }
                                                    };

                                                        // capture error callback
                                                    var captureError = function(error) {
                                                    navigator.notification.alert('Error code: ' + error.code, null, 'Capture Error');
                                                    };

                                                    // start image capture
                                                    navigator.device.capture.captureImage(captureSuccess, captureError, {limit:1});

                                                }catch(e){
                                                    console.log(e);
                                                }



                                                 /*

                                              //  Take a photo and retrieve it as a base64-encoded image:

                                                navigator.camera.getPicture(onSuccess, onFail, { quality: 50,
                                                    destinationType: Camera.DestinationType.DATA_URL
                                                });

                                                function onSuccess(imageData) {
                                                    alert(imageData);
                                                  console.log(imageData);
                                                    var src = "data:image/jpeg;base64," + imageData;
                                                    this.parent.items.items[0].setSrc(src);
                                                }

                                                function onFail(message) {
                                                    alert('Failed because: ' + message);
                                                }


                                                //Take a photo and retrieve the image's file location:

                                                navigator.camera.getPicture(onSuccess, onFail, { quality: 50,
                                                    destinationType: Camera.DestinationType.FILE_URI });

                                                function onSuccess(imageURI) {
                                                    var image = document.getElementById('myImage');
                                                    image.src = imageURI;
                                                }
                                                function onFail(message) {
                                                    alert('Failed because: ' + message);
                                                }
                                                */

                                                 /*
                                                    //CameraOptions

                                                    //Optional parameters to customize the camera settings.

                                                    { quality : 75,
                                                      destinationType : Camera.DestinationType.DATA_URL,
                                                      sourceType : Camera.PictureSourceType.CAMERA,
                                                      allowEdit : true,
                                                      encodingType: Camera.EncodingType.JPEG,
                                                      targetWidth: 100,
                                                      targetHeight: 100,
                                                      popoverOptions: CameraPopoverOptions,
                                                      saveToPhotoAlbum: false };
                                                    */





                                                 /*

                                                var captureSuccess = function(mediaFiles) {
                                                    var i, path, len;
                                                    for (i = 0, len = mediaFiles.length; i < len; i += 1) {
                                                        path = mediaFiles[i].fullPath;
                                                        console.log(path);
                                                        console.log(this.parent.items.items[0].setSrc(path));


                                                        //this.parents
                                                        // do something interesting with the file
                                                    }
                                                };

                                                // capture error callback
                                                var captureError = function(error) {
                                                    navigator.notification.alert('Error code: ' + error.code, null, 'Capture Error');
                                                };

                                                // start image capture
                                                navigator.device.capture.captureImage(captureSuccess, captureError, {limit:1});
                                                */

                                            //End Function


                                            }

                                        },
                                        cls: 'blueBtn',
                                        ui: 'plain',
                                        html: 'Add New Image',
                                        style : 'background: rgb(43, 72, 104);color: white; font-size: 12px;'

                                    }
                                ]
                            });
                   }//End image

               }//End Else
            }//End adding Q loop form fields in each form
    },

    addFormBackup: function(record, formId) {
        var title= record.data.formName;
        var font;
            if(title.length>20){

                 font='font-size : 14px;';


                }else{
                     font='';
                }



        //console.log(formId);
                if(Ext.getCmp(formId)){

                    Ext.getCmp('navMainView').setActiveItem(Ext.getCmp(formId));
            }else{



                Ext.getCmp('navMainView').add({
                        xtype: 'container',
                        id: formId,
                        layout: {
                            type: 'vbox',
                            pack: 'center'
                        },
                       // padding : 5,
                        items: [
                            {
                                xtype: 'titlebar',
                                cls: [
                                    'titleBar',
                                    'fontFamilyCath'
                                ],
                                docked: 'top',
                                title: record.data.formName,
                                style : font,
                                items: [
                                    {
                                        xtype: 'button',
                                        id : record.data.formName.replace(/ /g,'')+'_3',

                                         listeners: {
                                            tap: function(button,e, eOpts) {
                                            //alert('k');
                                                 //Ext.getCmp('navMainView').setActiveItem(Ext.getCmp('menuCont'));
                                            tekwave.app.getControllerInstances()['tekwave.controller.MainController'].navigation('menuCont');


                                            }//End itemTap
                                         },//End listner
                                        height: 30,
                                        html: '<img src="img/img/btn_menu.png" width="80%" height="80%" />',
                                        ui: 'plain',
                                        width: 50,
                                        text: ''
                                    }
                                ]
                            }
                    ]

        });



        Ext.getCmp(formId).add(

             {
                                xtype: 'panel',
                                height: '10%',
                                id: 'formCatTag'+formId,
                                layout: 'hbox',
                                cls : 'scrollerBar',//whitePnlBg

                                 /*
                                 items: [
                                    {
                                        xtype: 'button',
                                        handler: function(button, e) {

                                        },
                                        cls: 'lebelFont themeFontBlue fontFamilyCath',
                                        ui: 'plain',
                                        text: 'General'
                                    },
                                    {
                                        xtype: 'button',
                                        cls: 'lebelFont  fontFamilyCath',
                                        ui: 'plain',
                                        text: 'Questions'
                                    }
                                ]
                                */
                              scrollable: 'horizontal'
                            });




        Ext.getCmp(formId).add({
                                xtype: 'carousel',
                                height: '90%',
                                id : 'carousel'+formId,
                               listeners: {
                                initialize: function() {
                                    this.onBefore('activeitemchange', function(container, value, oldValue, eOpts) {

                                       // console.log('activeItem change');
                                       // console.log(container.getActiveIndex());
                                       // console.log(value);

                                       // console.log(Ext.getCmp('formCatTag'+formId).items.items);
                                        for(var a=0; a<Ext.getCmp('formCatTag'+formId).items.items.length; a++){

                                      //
                                            if(a===container.getActiveIndex()){
                                                //Scrolling menus
                                                Ext.getCmp('formCatTag'+formId).getScrollable().getScroller().scrollTo(Ext.getCmp('formCatTag'+formId).items.items[a].bodyElement.dom.offsetLeft ,  false, {type: 'slide', duration: '400', easing: 'linear'});

                                                 console.log(Ext.getCmp('formCatTag'+formId).items.items[a].bodyElement.dom.offsetLeft);
                                                Ext.getCmp('formCatTag'+formId).items.items[a].setCls('lebelFont themeFontBlue fontFamilyCath underLine');

                                            }else{
                                                Ext.getCmp('formCatTag'+formId).items.items[a].setCls('lebelFont fontFamilyCath');
                                            }


                                        }


                                        //Customize button Css



                                        /////



                                });
                                }
                                },
                                indicator: false
                            });






















            //Adding forms and top sectional navigation
            for(var k=0; k<record.data.allfieldData.length; k++){
                var cls;

                if(k===0){ cls='lebelFont themeFontBlue fontFamilyCath underLine';}
                else{ cls='lebelFont  fontFamilyCath'; }

                Ext.getCmp('formCatTag'+formId).add( {
                                        xtype: 'button',
                                        handler: function(button, e) {
                                            //change the pane
                                            //console.log(this.bodyElement.dom.offsetLeft+' '+this.bodyElement.dom.offsetWidth);
                                           //console.log(Ext.getCmp('formCatTag'+formId).getScrollable().getScroller().scrollTo(this.bodyElement.dom.offsetLeft ,  false, {type: 'slide', duration: '400', easing: 'linear'}));
                                            Ext.getCmp('formCatTag'+formId).getScrollable().getScroller().scrollTo(this.bodyElement.dom.offsetLeft ,  false, {type: 'slide', duration: '400', easing: 'linear'});
                                          //  console.log(this);

                                           // console.log( Ext.getCmp('carousel'+formId));
                                          // button.getScroller().scroller.scrollTo(0, 0);
                                            for(var j=0; j<button.parent.items.items.length; j++){
                                                if(button.id===button.parent.items.items[j].id){

                                                    Ext.getCmp('carousel'+formId).setActiveItem(j);
                                                    button.setCls('lebelFont themeFontBlue fontFamilyCath underLine');
                                                }else{
                                                    //console.log('else');
                                                    button.parent.items.items[j].setCls('lebelFont fontFamilyCath');
                                                }


                                            }//tracing button Position

                                           // console.log(button);

                                        },
                                        cls: cls,
                                        ui: 'plain',
                                        html : '<div class="">'+record.data.allfieldData[k].section+'</div>'
                                      // html : '<div class="arrow_box">'+record.data.allfieldData[k].section+'</div>'
                                       // text: record.data.allfieldData[k].section
                                    });


                //Adding Forms
                Ext.getCmp('carousel'+formId).add({
                        xtype: 'formpanel',
                        id : 'formpanel_'+k+formId,
                        height: '100%',
                        padding: 10,
                        layout: 'vbox',
                        scrollable: 'vertical'

                    /*
                    padding: 10,
                                        scrollable: 'vertical',
                                        layout: {
                                            type: 'vbox',
                                            align: 'center'
                                        }
                                        */
                    });










                var width='95%';
                var itemMargin=4;
                var lavelWidth='40%';
                //Adding different type sencha form fields like textfield, textare etc...
                for (var q=0; q<record.data.allfieldData[k].formField.length; q++){
                    var formFieldData=record.data.allfieldData[k].formField[q];
                  // console.log(formFieldData.type);







                    if(record.data.allfieldData[k].section==='Questions'){
                      //   console.log(formFieldData.type);
                     //   console.log(formFieldData.slctFldOptions);
                        //creating store for each select fields
                                var model = Ext.define('User', {
                                    extend: 'Ext.data.Model',
                                    config: {
                                    fields: [{
                                        name: 'text'

                                            }, {
                                           name: 'value'
                                            }]
                                        }
                                    });

                              var store= Ext.create("Ext.data.Store", {
                                storeId: "slectStore"+'formpanel_'+k+q+formId,
                                model: "User",
                                data: formFieldData.slctFldOptions
                                });

                      //  console.log(Ext.getStore("slectStore"+'formpanel_'+k+q+formId));

                          //  var opt=Ext.JSON.encode(formFieldData.slctFldOptions);


                        var sel={
                            xtype: 'selectfield',
                           // label: formFieldData.label ,
                          // name: 'name',
                            displayField: 'text',
                            store:'slectStore'+'formpanel_'+k+q+formId,
                            valueField: 'text',
                         //   value : 'value',
                            width : '20%'
                            //labelWidth: lavelWidth,
                           //  margin: itemMargin,
                          //  label:formFieldData.label
                        };

                      //  console.log(opt);
                            //console.log( formFieldData.slctFldOptions);
                      //   Ext.getCmp('formpanel_'+k+formId).add(sel);

                        /*
                         Ext.getCmp('formpanel_'+k+formId).add({
                        xtype: formFieldData.type,
                        width: width,
                        name : formFieldData.radioName,
                        labelWidth: '90%',
                        labelAlign: 'right',
                        margin: itemMargin,
                        label: formFieldData.label,
                        clearIcon: false,
                        //value: 'Friday',
                        placeHolder: formFieldData.placeHolder
                        //options: record.data.allfieldData[k].formField[q].slctFldOptions
                          }
                         );
                        */

                         Ext.getCmp('formpanel_'+k+formId).add({
                                                xtype: 'panel',
                                                margin: 5,
                                                layout: {
                                                    type: 'hbox',
                                                    align: 'center'
                                                },
                                                items: [
                                                    {
                                                        xtype: 'label',
                                                        cls: 'forgotBtnCls',
                                                        html: formFieldData.label,
                                                        width: '80%'
                                                    },
                                                    sel
                                                ]
                                            }
                        );







                    }else {//Adding different type

                    if(formFieldData.type==='textfield' ){

                        if(formFieldData.label.length>20){
                        Ext.getCmp('formpanel_'+k+formId).add({
                        xtype: formFieldData.type,
                        width: width,
                        labelWidth: lavelWidth,
                        labelAlign: 'top',
                             margin: itemMargin,
                        label: formFieldData.label,
                        clearIcon: false,
                        //value: 'Friday',
                        placeHolder: formFieldData.placeHolder
                        //options: record.data.allfieldData[k].formField[q].slctFldOptions
                          }
                         );

                        }else{
                             Ext.getCmp('formpanel_'+k+formId).add({
                        xtype: formFieldData.type,
                        width: width,
                         labelAlign: 'top',
                        //labelWidth: lavelWidth,
                        clearIcon: false,
                        margin: itemMargin,
                        label: formFieldData.label,
                        //value: 'Friday',
                        placeHolder: formFieldData.placeHolder
                        //options: record.data.allfieldData[k].formField[q].slctFldOptions
                          }
                         );

                        }


                    }
                    else if(formFieldData.type==='datepickerfield'){


                      //  console.log( formFieldData.slctFldOptions);
                         Ext.getCmp('formpanel_'+k+formId).add({
                        xtype: formFieldData.type,
                        width:width,
                              labelAlign: 'top',
                        //labelWidth: lavelWidth,
                        label:formFieldData.label ,
                              margin: itemMargin,
                        placeHolder: 'mm/dd/yyyy',
                                                picker: {
                                                    yearFrom: 2010,
                                                    yearTo: 2025
                                                }

                          });



                    }else if(formFieldData.type==='selectfiled'){


                    //creating store for each select fields
                                var model = Ext.define('User', {
                                    extend: 'Ext.data.Model',
                                    config: {
                                    fields: [{
                                        name: 'text'

                                            }, {
                                           name: 'value'
                                            }]
                                        }
                                    });

                              var store= Ext.create("Ext.data.Store", {
                                storeId: "slectStore"+'formpanel_'+k+q+formId,
                                model: "User",
                                data: formFieldData.slctFldOptions
                                });

                        //console.log(Ext.getStore("slectStore"+'formpanel_'+k+q+formId));

                          //  var opt=Ext.JSON.encode(formFieldData.slctFldOptions);

                        var labelAlign;
                        if(formFieldData.label.length>20){
                            laelAlign='top';

                        }else{
                            labelAlign='left';
                        }


                        var sel={
                            xtype: 'selectfield',
                            label: formFieldData.label ,
                          // name: 'name',
                            displayField: 'text',
                            store:'slectStore'+'formpanel_'+k+q+formId,
                            valueField: 'text',
                         //   value : 'value',
                            width : width,
                           // labelWidth: lavelWidth,
                            labelAlign :'top',//labelAlign

                             margin: itemMargin,
                            label:formFieldData.label
                        };

                      //  console.log(opt);
                            //console.log( formFieldData.slctFldOptions);
                         Ext.getCmp('formpanel_'+k+formId).add(sel);



                    }


                    else if(record.data.allfieldData[k].formField[q].type==='radiofield'){



                        Ext.getCmp('formpanel_'+k+formId).add({
                        xtype: formFieldData.type,
                        width: width,
                        name : formFieldData.radioName,
                        labelWidth: '90%',
                        labelAlign: 'right',
                             margin: itemMargin,
                        label: formFieldData.label,
                        clearIcon: false,
                        //value: 'Friday',
                        placeHolder: formFieldData.placeHolder
                        //options: record.data.allfieldData[k].formField[q].slctFldOptions
                          }
                         );
                    }else if(formFieldData.type==='label'){
                        if(formFieldData.style){
                            var styl=formFieldData.style;
                        }else{
                              var styl='font-size: 12px;text-align: left;padding-left: 4px;color: gray;text-decoration: none;';
                        }



                      //  console.log( formFieldData);
                         Ext.getCmp('formpanel_'+k+formId).add({
                            xtype: formFieldData.type,
                              //  width:width,
                              //  labelWidth: lavelWidth,
                              //  margin: itemMargin,
                            style : styl,
                              html:'<span>'+formFieldData.label+'</span>'

                          });



                    }
                    else if(formFieldData.type==='checkboxfield'){
                    var label ;


                        if(formFieldData.label.length===''){
                            Ext.getCmp('formpanel_'+k+formId).add({
                                                xtype: formFieldData.type,
                                                width: width,
                                                label: ' &nbps;&nbps;&nbps;&nbps;&nbps;&nbps;&nbps;&nbps;',
                                                labelAlign: 'right',
                                                labelWidth: '90%'
                                            });

                        }else{

                        Ext.getCmp('formpanel_'+k+formId).add({
                                                xtype: formFieldData.type,
                                                width: width,
                                                label: formFieldData.label,
                                                labelAlign: 'right',
                                                labelWidth: '90%'
                                            });

                        }

                        //console.log( formFieldData);



                    }else if(formFieldData.type==='datetimepickerfield'){


                       // console.log( formFieldData);
                         Ext.getCmp('formpanel_'+k+formId).add({
                            xtype: 'datetimepickerfield',
                         //   name : '12hr',
                            label: formFieldData.label,
                             width:width,
                        labelWidth: lavelWidth,
                        margin: itemMargin,
                            value: new Date(),
                            dateTimeFormat : 'h:i:A',
                            picker: {
                                yearFrom: 1980,
                                minuteInterval : 1,
                                ampm : true,
                                slotOrder: ['hour','minute','ampm']
                            }
                         });



                    }
                        else if(formFieldData.type==='datetimepickerfieldWithTime'){


                       // console.log( formFieldData);
                         Ext.getCmp('formpanel_'+k+formId).add({
                            xtype: 'datetimepickerfield',
                           label: formFieldData.label,
                             width:width,
                        labelWidth: lavelWidth,
                        margin: itemMargin,
                            value: new Date(),
                            dateTimeFormat : 'Y-m-d H:i',
                            picker: {
                                yearFrom: 1980,
                                minuteInterval : 1,
                                ampm : false,
                                slotOrder: ['month', 'day', 'year','hour','minute']
                            }
                         });



                    }else if(formFieldData.type==='textareafield' ){

                        if(formFieldData.label.length>10){
                        Ext.getCmp('formpanel_'+k+formId).add(
                            {
                        xtype: formFieldData.type,
                       // width: width,
                       // labelWidth: lavelWidth,
                        labelAlign: 'top',
                        margin: itemMargin,
                        label: formFieldData.label,
                        style : ' white-space: nowrap; ',
                        clearIcon: false,
                        //value: 'Friday',
                        placeHolder: formFieldData.placeHolder
                        //options: record.data.allfieldData[k].formField[q].slctFldOptions
                          }
                         );

                        }else{
                          Ext.getCmp('formpanel_'+k+formId).add({
                                xtype: formFieldData.type,
                               // width: width,
                               // labelWidth: lavelWidth,
                                labelAlign: 'top',
                                clearIcon: false,
                                margin: itemMargin,
                                label: formFieldData.label,
                                //value: 'Friday',
                                placeHolder: formFieldData.placeHolder
                                //options: record.data.allfieldData[k].formField[q].slctFldOptions
                          }
                         );

                        }


                    }else if(formFieldData.type==='signaturefield' ){


                         Ext.getCmp('formpanel_'+k+formId).add({
                            xtype: 'signaturefield',
                              width:width,
                            //id: 'signatureField',
                           // margin : '20 20 20 20',   //border : 2px solid red; color : gray;
                            // html : '<div style="border: 2px solid red; font-size : 14px; padding-top : 5%; padding-bottom : 8%; margin-left : 15px; ">Tap to Draw Signature....</div>',
                            sigWidth: 300,

                            sigHeight: 200,
                              labelAlign: 'top',
                              labelWidth: '30%',
                          	label:'Tap Here to Draw Signature....'//,

                        });


                    }else if(formFieldData.type==='image'){











                        Ext.getCmp('formpanel_'+k+formId).add({
                                xtype: 'panel',
                                docked: 'top',
                                height: '15%',
                                margin: 5,
                                width: '100%',
                                layout: {
                                    type: 'hbox',
                                    align: 'center'
                                },
                                items: [
                                    {
                                        xtype: 'image',
                                        height: '100%',
                                        width: '40%',
                                        src: 'img/logo.png'
                                    },
                                    {
                                        xtype: 'button',
                                        handler: function(button, e) {
                                            console.log(this);
                                            console.log(this.parent.items.items[0]);




                                            document.addEventListener("deviceready",onDeviceReady,false);

                                            // PhoneGap is ready to be used!
                                            //
                                            function onDeviceReady() {

                                                try {
                                                    console.log('device ready');
                                                    console.log( this.parent.items.items[0].getSrc());
                                               // capture callback
                                                    var captureSuccess = function(mediaFiles) {
                                                    var i, path, len;
                                                    for (i = 0, len = mediaFiles.length; i < len; i += 1) {
                                                    path = mediaFiles[i].fullPath;
                                                    alert(path);
                                                    console.log( this.parent.items.items[0].getSrc());
                                                     this.parent.items.items[0].setSrc(path);
                                                    // do something interesting with the file
                                                    }
                                                    };

                                                        // capture error callback
                                                    var captureError = function(error) {
                                                    navigator.notification.alert('Error code: ' + error.code, null, 'Capture Error');
                                                    };

                                                    // start image capture
                                                    navigator.device.capture.captureImage(captureSuccess, captureError, {limit:1});

                                                }catch(e){
                                                    console.log(e);
                                                }



                                                 /*

                                              //  Take a photo and retrieve it as a base64-encoded image:

                                                navigator.camera.getPicture(onSuccess, onFail, { quality: 50,
                                                    destinationType: Camera.DestinationType.DATA_URL
                                                });

                                                function onSuccess(imageData) {
                                                    alert(imageData);
                                                  console.log(imageData);
                                                    var src = "data:image/jpeg;base64," + imageData;
                                                    this.parent.items.items[0].setSrc(src);
                                                }

                                                function onFail(message) {
                                                    alert('Failed because: ' + message);
                                                }


                                                //Take a photo and retrieve the image's file location:

                                                navigator.camera.getPicture(onSuccess, onFail, { quality: 50,
                                                    destinationType: Camera.DestinationType.FILE_URI });

                                                function onSuccess(imageURI) {
                                                    var image = document.getElementById('myImage');
                                                    image.src = imageURI;
                                                }
                                                function onFail(message) {
                                                    alert('Failed because: ' + message);
                                                }
                                                */

                                                 /*
                                                    //CameraOptions

                                                    //Optional parameters to customize the camera settings.

                                                    { quality : 75,
                                                      destinationType : Camera.DestinationType.DATA_URL,
                                                      sourceType : Camera.PictureSourceType.CAMERA,
                                                      allowEdit : true,
                                                      encodingType: Camera.EncodingType.JPEG,
                                                      targetWidth: 100,
                                                      targetHeight: 100,
                                                      popoverOptions: CameraPopoverOptions,
                                                      saveToPhotoAlbum: false };
                                                    */





                                                 /*

                                                var captureSuccess = function(mediaFiles) {
                                                    var i, path, len;
                                                    for (i = 0, len = mediaFiles.length; i < len; i += 1) {
                                                        path = mediaFiles[i].fullPath;
                                                        console.log(path);
                                                        console.log(this.parent.items.items[0].setSrc(path));


                                                        //this.parents
                                                        // do something interesting with the file
                                                    }
                                                };

                                                // capture error callback
                                                var captureError = function(error) {
                                                    navigator.notification.alert('Error code: ' + error.code, null, 'Capture Error');
                                                };

                                                // start image capture
                                                navigator.device.capture.captureImage(captureSuccess, captureError, {limit:1});
                                                */

                                            //End Function


                                            }

                                        },
                                        cls: 'blueBtn',
                                        ui: 'plain',
                                        html: 'Add New Image',
                                        style : 'background: rgb(43, 72, 104);color: white; font-size: 12px;'

                                    }
                                ]
                            });
                   }//End image

               }//End Else
            }//End adding Q loop form fields in each form
           }//End K Loop



        //Adding Bottom tool bar

        Ext.getCmp(formId).add(
            {
                                xtype: 'panel',
                                cls: 'titleBar',
                                docked: 'bottom',
                                height: 50,
                                hidden: false,
                                layout: {
                                    type: 'hbox',
                                    align: 'center'
                                },
                                items: [
                                    {
                                        xtype: 'button',
                                        handler: function(button, e) {
                                               //Save/Cancel form

                                        },
                                        html: '<img class="imgBtnCls" src="img/save_icon.png"  /><p class="whiteBtn">Save</p>',
                                        id: 'formSave',
                                        ui: 'plain',
                                        width: '50px',
                                        text: ''
                                    },
                                    {
                                        xtype: 'spacer'
                                    },
                                    {
                                        xtype: 'button',
                                        handler: function(button, e) {
                                                   //Save/Cancel form
                                        },
                                        html: '<img style="width: 30%;" class="" src="img/upload_icon.png" /><p class="whiteBtn">Save & Upload</p>',
                                        id: 'formSave1',
                                        ui: 'plain',
                                        width: '85px',
                                        text: ''
                                    },
                                    {
                                        xtype: 'spacer'
                                    },
                                    {
                                        xtype: 'button',
                                        handler: function(button, e) {
                                            //Save/Cancel form

                                        },
                                        html: '<img src="img/cancel_icon.png"  class="imgBtnCls" /> <p class="whiteBtn">Cancel</p>',
                                        ui: 'plain',
                                        width: '50px'
                                    }
                                ]
                            });


        }//End check form Existance

    },

    search: function() {
        /*

        Incident Search Screen Fields:
        •         Level
        •         Type
        •         Location
        •         Status
        •         Description

        Unusual Incident Search Screen Fields:
        •         Level
        •         Type
        •         Location
        •         Status
        •         Description

        Logistics Search Screen Fields:
        •         Driver’s License
        •         Driver Name
        •         Tractor #
        •         Trailer #
        •         Seal #
        •         Carrier
        •         Destination Info
        •         Company
        •         Insurance Info
        •         Credential Info
        •         Cargo Info

        Visitor Search Screen Fields:
        •         Destination
        •         Status
        •         Host Name
        •         Host Vehicle
        •         Host  Decal
        •         Type
        •         Notes
        •         Visitor Name
        •         Host Address
        •         Credential
        •         Created By
        •         DL Number
        •         Vehicle License
        •         Vehicle Make/Model
        •         Contact Info
        •         Pass Number

        */


        ///////////////////
        /*
        //Static Form Fields for list view

        Incidents:

        ·         ID

        ·         Short Description

        ·         Incident Date/Time

        ·         Created By

        ·         Location



        Logistics:

        ·         ID

        ·         Driver Name

        ·         Arrival Date

        Visitors:

        ·         ID

        ·         First Name

        ·         Last Name

        ·         Schedule Date

        DAR:

        ·         ID

        ·         Start Time

        ·         End Time

        ·         Created Date

        ·         Created By



        DAR Activities:

        ·         ID

        ·         Activity Time

        ·         Comments



        Unusual Incidents:

        ·         ID

        ·         Account Number

        ·         Date / Time

        ·         Reported By

        Daily Reports:

        ·         ID

        ·         Shift Date

        ·         Start Time

        ·         End Time

        Daily Report Activities (Tied to a Daily Report):

        ·         ID

        ·         Activity Date

        ·         Comments

        Passdown Logs:

        ·         ID

        ·         Notes

        ·         Date / Time



        Officer Compliance Inspections:

        ·         ID

        ·         Account

        ·         Officer

        ·         Started

        Odor Or Dust:

        ·         ID

        ·         Location

        ·         Date Reported

        ·         Reported By

        ·         Issue Type

        ·         Level

        Post Inspection:

        ·         ID

        ·         Date Created

        ·         Officer Name

        ·         Supervisor Name

        Progressive Counseling:

        ·         ID

        ·         Officer Name

        ·         Supervisor Name

        ·         Date Created

        Wind Speed Direction:

        ·         ID

        ·         Day Of Week

        ·         Date / Time

        ·         Created By

        */
    },

    createSearchView: function(record) {
        //createSearchView
    },

    formDetailedView: function(record, formId) {


        Ext.getCmp('navMainView').add({
                        xtype: 'container',
                        id:'detailedView_'+ record.data.quickLinkScreen.replace(/ /g,''),
                        layout: {
                            type: 'vbox',
                            pack: 'center'
                        },
                        cls : 'backgrounWhite',
                       // padding : 5,
                        items: [
                            {
                                xtype: 'titlebar',
                                cls: [
                                    'titleBar',
                                    'fontFamilyCath'

                                ],
                                docked: 'top',

                                title: record.data.formName,
                              //  style : font,
                                items: [
                                    {
                                        xtype: 'button',
                                        /*
                                        handler: function(button, e) {

                                                },
                                                */
                                        listeners: {
                                            tap: function() {
                                             console.log(Ext.getCmp('navMainView'))   ;
                                                 //alert('s');
                                               //  Ext.getCmp('navMainView').setActiveItem(Ext.getCmp('menuCont'));
                                                 tekwave.app.getControllerInstances()['tekwave.controller.MainController'].navigation('menuCont');


                                    }//End itemTap

                                  },//end listners
                                        height: 30,
                                        html: '<img src="img/img/btn_menu.png" width="80%" height="80%" />',
                                        ui: 'plain',
                                        width: 50,

                                         id : record.data.quickLinkScreen.replace(/ /g,'')+'_2',
                                        text: ''
                                    }
                                ]
                            },
                            {
                                xtype : 'panel',
                                height: '100%',
                                padding: 10,
                                cls : 'fontFamilyCath',
                                layout: 'vbox',
                                scrollable: 'vertical',
                                html :  '<div class="" >'+//staticListSection
                                    '    <div class="staticListdiv"> <p>  &nbsp;Id </p> <span class="font12" > 12345</span></div>'+
                                    '    <div class="staticListdiv"> <p> &nbsp; Short Discription </p> <span class="font12"> loremipsum This fairly describes my roller coaster experience of curiosity, wonder and disappointment over the past few weeks....</span></div>'+
                                    '    <div class="staticListdiv"> <p>  &nbsp;Incident Date/Time </p><span class="font12">  loremipsum This fairly describes my roller coaster </span> </div>'+
                                    '    <div class="staticListdiv">  <p> &nbsp; Created By </p> <span class="font12">  loremipsum This fairly describes my roller coaster </span> </div>'+
                                    '<div class="staticListdiv" style="border-bottom : 1px solid black;"> <p> &nbsp; Location </p> <span class="font12">  loremipsum This fairly describes my roller coaster </span> </div>'+//staticListBdr
                                    ' </div>'



                            }






                    ]

        });
    }

});